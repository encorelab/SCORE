{"version":3,"sources":["graphController.spec.es6"],"names":["describe","$controller","$rootScope","$scope","$httpBackend","graphController","component","createComponentState","componentStateId","nodeId","componentId","componentStateIdReplyingTo","response","id","studentData","beforeEach","angular","mock","module","mainModule","name","inject","_$controller_","_$rootScope_","_$httpBackend_","type","prompt","showSaveButton","showSubmitButton","graphType","xAxis","title","text","min","max","units","locked","yAxis","series","data","color","canEdit","$new","componentContent","JSON","parse","stringify","it","highX","makeSureXIsWithinXMinMaxLimits","expect","toEqual","lowX","highY","makeSureYIsWithinYMinMaxLimits","lowY","trials","show","getSeriesFromTrials","length","number","roundValuesTo","performRounding","setDefaultActiveSeries","activeSeries","getSeriesByIndex","rows","params","skipFirstRow","xColumn","yColumn","convertRowDataToSeriesData","params1","getXColumnValue","params2","getYColumnValue","series1","series2","isActiveSeries","newTrial","trialNumbersEmpty","getTrialNumbers","trialNumbers","deleteTrial","trialIdsToShow","activeTrial","makeHighestTrialActive","highestTrial","getHighestTrial","setTrialIdsToShow","deleteTrialsByTrialId","deleteTrialId","latestTrial","getLatestStudentDataTrial","hideAllTrials","trial","createNewTrial","allowPointSelect","newSeries","copySeries","latestStudentDataTrialId","removeDefaultTrialIfNecessary","trial1","isTrialHasEmptySeries","trial2","isSeriesEmpty","trialId","createNewTrialIfNecessary","oldTrial","copySeriesIntoTrial","copyTrialNameIntoTrial","trial3","getTrialById","hasEditableSeries","trial0","minMaxValues","getMinMaxValues","xMin","xMax","yMin","yMax","updateMinMaxAxisValues","clearSeriesIds","csvString","readCSVIntoActiveSeries","xAxisType","convertSeriesDataPoints","x","setVerticalPlotLine","plotLines","value","baseComponentState","connectedComponentState","mergeFields","when","action","firstTime","mergeComponentState","selectedCells","airTemp","bevTemp","material","dateAdded","selectedTrialIds","convertSelectedCellsToTrialIds","readConnectedComponentFieldFromStudentData","componentState","undoStack","undoClicked","previousComponentState","categories","getCategoryByIndex","dataPointObject","y","dataPointArray","getXValueFromDataPoint","getYValueFromDataPoint","mouseOverPoints","getLatestMouseOverPointX","getLatestMouseOverPointY","addPointToSeries","removePointFromSeries","getTrialIndex","deferred","zoomType","chartConfig","createChartConfig","options","chart","multipleSeries","isSeriesEditable","multipleSeries0","getLatestEditableSeriesIndex","multipleSeries1","multipleSeries2","multipleSeries3","previousTrialIdsToShow","studentDataChangedSpy","spyOn","and","callFake","trialIdsToShowChanged","toHaveBeenCalled","showOrHideTrials","setActiveTrialAndSeriesByTrialIdsToShow"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEAA,SAAS,iBAAT,EAA4B,YAAM;;AAEhC,MAAIC,oBAAJ;AACA,MAAIC,mBAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,qBAAJ;AACA,MAAIC,wBAAJ;AACA,MAAIC,kBAAJ;AACA,MAAMC,uBAAuB,SAAvBA,oBAAuB,CAACC,gBAAD,EAAmBC,MAAnB,EAA2BC,WAA3B,EAAwCC,0BAAxC,EAAoEC,QAApE,EAAiF;AAC5G,WAAO;AACLC,UAAIL,gBADC;AAELC,cAAQA,MAFH;AAGLC,mBAAaA,WAHR;AAILI,mBAAa;AACXF,kBAAUA,QADC;AAEXD,oCAA4BA;AAFjB;AAJR,KAAP;AASD,GAVD;;AAYAI,aAAWC,kBAAQC,IAAR,CAAaC,MAAb,CAAoBC,eAAWC,IAA/B,CAAX;;AAEAL,aAAWM,OAAO,UAACC,aAAD,EAAgBC,YAAhB,EAA8BC,cAA9B,EAAiD;AACjEvB,kBAAcqB,aAAd;AACApB,iBAAaqB,YAAb;AACAnB,mBAAeoB,cAAf;AACAlB,gBAAY;AACVO,UAAI,YADM;AAEVY,YAAM,OAFI;AAGVC,cAAQ,2BAHE;AAIVC,sBAAgB,KAJN;AAKVC,wBAAkB,KALR;AAMVC,iBAAW,MAND;AAOVC,aAAO;AACLC,eAAO;AACLC,gBAAM;AADD,SADF;AAILC,aAAK,CAJA;AAKLC,aAAK,GALA;AAMLC,eAAO,GANF;AAOLC,gBAAQ,IAPH;AAQLX,cAAM;AARD,OAPG;AAiBVY,aAAO;AACLN,eAAO;AACLC,gBAAM;AADD,SADF;AAILC,aAAK,CAJA;AAKLC,aAAK,GALA;AAMLC,eAAO,GANF;AAOLC,gBAAQ;AAPH,OAjBG;AA0BVE,cAAQ,CACN;AACEzB,YAAI,UADN;AAEEO,cAAM,YAFR;AAGEmB,cAAM,EAHR;AAIEC,eAAO,MAJT;AAKEC,iBAAS;AALX,OADM;AA1BE,KAAZ;AAoCAtC,aAASD,WAAWwC,IAAX,EAAT;AACAvC,WAAOwC,gBAAP,GAA0BC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAexC,SAAf,CAAX,CAA1B;AACAD,sBAAkBJ,YAAY,iBAAZ,EAA+B,EAAEE,QAAQA,MAAV,EAA/B,CAAlB;AACAE,oBAAgBI,MAAhB,GAAyB,OAAzB;AACD,GA5CU,CAAX;;AA8CAsC,KAAG,qCAAH,EAA0C,YAAM;AAC9C,QAAIC,QAAQ,GAAZ;AACAA,YAAQ3C,gBAAgB4C,8BAAhB,CAA+CD,KAA/C,CAAR;AACAE,WAAOF,KAAP,EAAcG,OAAd,CAAsB,GAAtB;AACA,QAAIC,OAAO,CAAC,EAAZ;AACAA,WAAO/C,gBAAgB4C,8BAAhB,CAA+CG,IAA/C,CAAP;AACAF,WAAOE,IAAP,EAAaD,OAAb,CAAqB,CAArB;AACD,GAPD;;AASAJ,KAAG,qCAAH,EAA0C,YAAM;AAC9C,QAAIM,QAAQ,GAAZ;AACAA,YAAQhD,gBAAgBiD,8BAAhB,CAA+CD,KAA/C,CAAR;AACAH,WAAOG,KAAP,EAAcF,OAAd,CAAsB,GAAtB;AACA,QAAII,OAAO,CAAC,EAAZ;AACAA,WAAOlD,gBAAgBiD,8BAAhB,CAA+CC,IAA/C,CAAP;AACAL,WAAOK,IAAP,EAAaJ,OAAb,CAAqB,CAArB;AACD,GAPD;;AASAJ,KAAG,uCAAH,EAA4C,YAAM;AAChD,QAAMS,SAAS,CACb;AACEpC,YAAM,SADR;AAEEqC,YAAM,IAFR;AAGEnB,cAAQ,CAAC;AACPlB,cAAM,YADC;AAEPmB,cAAM,CACJ,CAAC,CAAD,EAAI,CAAJ,CADI,EAEJ,CAAC,EAAD,EAAK,EAAL,CAFI,EAGJ,CAAC,EAAD,EAAK,EAAL,CAHI;AAFC,OAAD,EAOL;AACDnB,cAAM,QADL;AAEDmB,cAAM,CACJ,CAAC,CAAD,EAAI,CAAJ,CADI,EAEJ,CAAC,EAAD,EAAK,EAAL,CAFI,EAGJ,CAAC,EAAD,EAAK,EAAL,CAHI;AAFL,OAPK,CAHV;AAkBE1B,UAAI;AAlBN,KADa,EAqBb;AACEO,YAAM,SADR;AAEEqC,YAAM,IAFR;AAGEnB,cAAQ,CAAC;AACPlB,cAAM,YADC;AAEPmB,cAAM,CACJ,CAAC,CAAD,EAAI,CAAJ,CADI,EAEJ,CAAC,EAAD,EAAK,EAAL,CAFI,EAGJ,CAAC,EAAD,EAAK,EAAL,CAHI;AAFC,OAAD,EAOL;AACDnB,cAAM,QADL;AAEDmB,cAAM,CACJ,CAAC,CAAD,EAAI,CAAJ,CADI,EAEJ,CAAC,EAAD,EAAK,EAAL,CAFI,EAGJ,CAAC,EAAD,EAAK,EAAL,CAHI;AAFL,OAPK,CAHV;AAkBE1B,UAAI;AAlBN,KArBa,CAAf;AA0CA,QAAMyB,SAASjC,gBAAgBqD,mBAAhB,CAAoCF,MAApC,CAAf;AACAN,WAAOZ,OAAOqB,MAAd,EAAsBR,OAAtB,CAA8B,CAA9B;AACD,GA7CD;;AA+CAJ,KAAG,yBAAH,EAA8B,YAAM;AAClC,QAAMa,SAAS,MAAf;AACAvD,oBAAgBsC,gBAAhB,CAAiCkB,aAAjC,GAAiD,SAAjD;AACAX,WAAO7C,gBAAgByD,eAAhB,CAAgCF,MAAhC,CAAP,EAAgDT,OAAhD,CAAwD,EAAxD;AACA9C,oBAAgBsC,gBAAhB,CAAiCkB,aAAjC,GAAiD,OAAjD;AACAX,WAAO7C,gBAAgByD,eAAhB,CAAgCF,MAAhC,CAAP,EAAgDT,OAAhD,CAAwD,IAAxD;AACA9C,oBAAgBsC,gBAAhB,CAAiCkB,aAAjC,GAAiD,WAAjD;AACAX,WAAO7C,gBAAgByD,eAAhB,CAAgCF,MAAhC,CAAP,EAAgDT,OAAhD,CAAwD,KAAxD;AACD,GARD;;AAUAJ,KAAG,sCAAH,EAA2C,YAAM;AAC/C1C,oBAAgBiC,MAAhB,GAAyB,CACvB;AACElB,YAAM,UADR;AAEEqB,eAAS,KAFX;AAGEF,YAAM;AAHR,KADuB,EAMvB;AACEnB,YAAM,UADR;AAEEqB,eAAS,IAFX;AAGEF,YAAM;AAHR,KANuB,CAAzB;AAYAlC,oBAAgB0D,sBAAhB;AACAb,WAAO7C,gBAAgB2D,YAAhB,CAA6B5C,IAApC,EAA0C+B,OAA1C,CAAkD,UAAlD;AACD,GAfD;;AAiBAJ,KAAG,4BAAH,EAAiC,YAAM;AACrC1C,oBAAgBiC,MAAhB,GAAyB,CACvB;AACElB,YAAM,UADR;AAEEqB,eAAS,KAFX;AAGEF,YAAM;AAHR,KADuB,EAMvB;AACEnB,YAAM,UADR;AAEEqB,eAAS,IAFX;AAGEF,YAAM;AAHR,KANuB,CAAzB;AAYAW,WAAO7C,gBAAgB4D,gBAAhB,CAAiC,CAAjC,EAAoC7C,IAA3C,EAAiD+B,OAAjD,CAAyD,UAAzD;AACD,GAdD;;AAgBAJ,KAAG,wCAAH,EAA6C,YAAM;AACjD,QAAMmB,OAAO,CACX,CAAC,EAAElC,MAAM,MAAR,EAAD,EAAkB,EAAEA,MAAM,UAAR,EAAlB,CADW,EAEX,CAAC,EAAEA,MAAM,GAAR,EAAD,EAAe,EAAEA,MAAM,IAAR,EAAf,CAFW,EAGX,CAAC,EAAEA,MAAM,IAAR,EAAD,EAAgB,EAAEA,MAAM,IAAR,EAAhB,CAHW,CAAb;AAKA,QAAMmC,SAAS;AACbC,oBAAc,IADD;AAEbC,eAAS,CAFI;AAGbC,eAAS;AAHI,KAAf;AAKA,QAAM/B,OAAOlC,gBAAgBkE,0BAAhB,CAA2CL,IAA3C,EAAiDC,MAAjD,CAAb;AACAjB,WAAOX,KAAK,CAAL,EAAQ,CAAR,CAAP,EAAmBY,OAAnB,CAA2B,CAA3B;AACAD,WAAOX,KAAK,CAAL,EAAQ,CAAR,CAAP,EAAmBY,OAAnB,CAA2B,EAA3B;AACAD,WAAOX,KAAK,CAAL,EAAQ,CAAR,CAAP,EAAmBY,OAAnB,CAA2B,EAA3B;AACAD,WAAOX,KAAK,CAAL,EAAQ,CAAR,CAAP,EAAmBY,OAAnB,CAA2B,EAA3B;AACD,GAhBD;;AAkBAJ,KAAG,2CAAH,EAAgD,YAAM;AACpD,QAAMyB,UAAU;AACdJ,oBAAc,IADA;AAEdC,eAAS,CAFK;AAGdC,eAAS;AAHK,KAAhB;AAKApB,WAAO7C,gBAAgBoE,eAAhB,CAAgCD,OAAhC,CAAP,EAAiDrB,OAAjD,CAAyD,CAAzD;AACA,QAAMuB,UAAU,EAAhB;AACAxB,WAAO7C,gBAAgBoE,eAAhB,CAAgCC,OAAhC,CAAP,EAAiDvB,OAAjD,CAAyD,CAAzD;AACD,GATD;;AAWAJ,KAAG,2CAAH,EAAgD,YAAM;AACpD,QAAMyB,UAAU;AACdJ,oBAAc,IADA;AAEdC,eAAS,CAFK;AAGdC,eAAS;AAHK,KAAhB;AAKApB,WAAO7C,gBAAgBsE,eAAhB,CAAgCH,OAAhC,CAAP,EAAiDrB,OAAjD,CAAyD,CAAzD;AACA,QAAMuB,UAAU,EAAhB;AACAxB,WAAO7C,gBAAgBsE,eAAhB,CAAgCD,OAAhC,CAAP,EAAiDvB,OAAjD,CAAyD,CAAzD;AACD,GATD;;AAWAJ,KAAG,+CAAH,EAAoD,YAAM;AACxD,QAAM6B,UAAU,EAAhB;AACA,QAAMC,UAAU,EAAhB;AACAxE,oBAAgBiC,MAAhB,GAAyB,CACvBsC,OADuB,EAEvBC,OAFuB,CAAzB;AAIAxE,oBAAgB2D,YAAhB,GAA+Ba,OAA/B;AACA3B,WAAO7C,gBAAgByE,cAAhB,CAA+BD,OAA/B,CAAP,EAAgD1B,OAAhD,CAAwD,IAAxD;AACD,GATD;;AAWAJ,KAAG,2BAAH,EAAgC,YAAM;AACpC,QAAM6B,UAAU,EAAhB;AACA,QAAMC,UAAU,EAAhB;AACAxE,oBAAgBiC,MAAhB,GAAyB,CACvBsC,OADuB,EAEvBC,OAFuB,CAAzB;AAIAxE,oBAAgB2D,YAAhB,GAA+BY,OAA/B;AACA1B,WAAO7C,gBAAgBmD,MAAhB,CAAuBG,MAA9B,EAAsCR,OAAtC,CAA8C,CAA9C;AACA9C,oBAAgB0E,QAAhB;AACA7B,WAAO7C,gBAAgBmD,MAAhB,CAAuBG,MAA9B,EAAsCR,OAAtC,CAA8C,CAA9C;AACD,GAXD;;AAaAJ,KAAG,8BAAH,EAAmC,YAAM;AACvC1C,oBAAgBmD,MAAhB,GAAyB,EAAzB;AACA,QAAMwB,oBAAoB3E,gBAAgB4E,eAAhB,EAA1B;AACA/B,WAAO8B,kBAAkBrB,MAAzB,EAAiCR,OAAjC,CAAyC,CAAzC;AACA9C,oBAAgBmD,MAAhB,GAAyB,CACvB,EAAEpC,MAAM,SAAR,EADuB,EAEvB,EAAEA,MAAM,SAAR,EAFuB,EAGvB,EAAEA,MAAM,SAAR,EAHuB,CAAzB;AAKA,QAAM8D,eAAe7E,gBAAgB4E,eAAhB,EAArB;AACA/B,WAAOgC,aAAa,CAAb,CAAP,EAAwB/B,OAAxB,CAAgC,CAAhC;AACAD,WAAOgC,aAAa,CAAb,CAAP,EAAwB/B,OAAxB,CAAgC,CAAhC;AACAD,WAAOgC,aAAa,CAAb,CAAP,EAAwB/B,OAAxB,CAAgC,CAAhC;AACD,GAbD;;AAeAJ,KAAG,uBAAH,EAA4B,YAAM;AAChC1C,oBAAgBmD,MAAhB,GAAyB,CACvB,EAAEpC,MAAM,SAAR,EADuB,EAEvB,EAAEA,MAAM,SAAR,EAFuB,EAGvB,EAAEA,MAAM,SAAR,EAHuB,CAAzB;AAKA8B,WAAO7C,gBAAgBmD,MAAhB,CAAuBG,MAA9B,EAAsCR,OAAtC,CAA8C,CAA9C;AACA9C,oBAAgB8E,WAAhB,CAA4B,CAA5B;AACAjC,WAAO7C,gBAAgBmD,MAAhB,CAAuBG,MAA9B,EAAsCR,OAAtC,CAA8C,CAA9C;AACAD,WAAO7C,gBAAgBmD,MAAhB,CAAuB,CAAvB,EAA0BpC,IAAjC,EAAuC+B,OAAvC,CAA+C,SAA/C;AACAD,WAAO7C,gBAAgBmD,MAAhB,CAAuB,CAAvB,EAA0BpC,IAAjC,EAAuC+B,OAAvC,CAA+C,SAA/C;AACD,GAXD;;AAaAJ,KAAG,sCAAH,EAA2C,YAAM;AAC/C1C,oBAAgBmD,MAAhB,GAAyB,CACvB,EAAEpC,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAAqCyB,QAAQ,EAA7C,EADuB,EAEvB,EAAElB,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAAqCyB,QAAQ,EAA7C,EAFuB,EAGvB,EAAElB,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAAqCyB,QAAQ,EAA7C,EAHuB,CAAzB;AAKAjC,oBAAgB+E,cAAhB,GAAiC,CAAC,YAAD,EAAe,YAAf,CAAjC;AACAlC,WAAO7C,gBAAgBgF,WAAvB,EAAoClC,OAApC,CAA4C,IAA5C;AACA9C,oBAAgBiF,sBAAhB;AACApC,WAAO7C,gBAAgBgF,WAAvB,EAAoClC,OAApC,CAA4C9C,gBAAgBmD,MAAhB,CAAuB,CAAvB,CAA5C;AACD,GAVD;;AAYAT,KAAG,oCAAH,EAAyC,YAAM;AAC7C1C,oBAAgBmD,MAAhB,GAAyB,CACvB,EAAEpC,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EADuB,EAEvB,EAAEO,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAFuB,EAGvB,EAAEO,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAHuB,CAAzB;AAKAR,oBAAgB+E,cAAhB,GAAiC,CAAC,YAAD,EAAe,YAAf,CAAjC;AACAlC,WAAO7C,gBAAgBgF,WAAvB,EAAoClC,OAApC,CAA4C,IAA5C;AACA,QAAMoC,eAAelF,gBAAgBmF,eAAhB,EAArB;AACAtC,WAAOqC,YAAP,EAAqBpC,OAArB,CAA6B9C,gBAAgBmD,MAAhB,CAAuB,CAAvB,CAA7B;AACD,GAVD;;AAYAT,KAAG,kCAAH,EAAuC,YAAM;AAC3CG,WAAO7C,gBAAgB+E,cAAhB,CAA+BzB,MAAtC,EAA8CR,OAA9C,CAAsD,CAAtD;AACA9C,oBAAgBmD,MAAhB,GAAyB,CACvB,EAAEpC,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAAqC4C,MAAM,IAA3C,EADuB,EAEvB,EAAErC,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAAqC4C,MAAM,KAA3C,EAFuB,EAGvB,EAAErC,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAAqC4C,MAAM,IAA3C,EAHuB,CAAzB;AAKApD,oBAAgBoF,iBAAhB;AACAvC,WAAO7C,gBAAgB+E,cAAhB,CAA+BzB,MAAtC,EAA8CR,OAA9C,CAAsD,CAAtD;AACAD,WAAO7C,gBAAgB+E,cAAhB,CAA+B,CAA/B,CAAP,EAA0CjC,OAA1C,CAAkD,YAAlD;AACAD,WAAO7C,gBAAgB+E,cAAhB,CAA+B,CAA/B,CAAP,EAA0CjC,OAA1C,CAAkD,YAAlD;AACD,GAXD;;AAaAJ,KAAG,4BAAH,EAAiC,YAAM;AACrC1C,oBAAgBmD,MAAhB,GAAyB,CACvB,EAAEpC,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EADuB,EAEvB,EAAEO,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAFuB,EAGvB,EAAEO,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAHuB,CAAzB;AAKAqC,WAAO7C,gBAAgBmD,MAAhB,CAAuBG,MAA9B,EAAsCR,OAAtC,CAA8C,CAA9C;AACA9C,oBAAgBqF,qBAAhB,CAAsC,CAAC,YAAD,EAAe,YAAf,CAAtC;AACAxC,WAAO7C,gBAAgBmD,MAAhB,CAAuBG,MAA9B,EAAsCR,OAAtC,CAA8C,CAA9C;AACD,GATD;;AAWAJ,KAAG,2BAAH,EAAgC,YAAM;AACpC1C,oBAAgBmD,MAAhB,GAAyB,CACvB,EAAEpC,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EADuB,EAEvB,EAAEO,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAFuB,EAGvB,EAAEO,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAHuB,CAAzB;AAKAqC,WAAO7C,gBAAgBmD,MAAhB,CAAuBG,MAA9B,EAAsCR,OAAtC,CAA8C,CAA9C;AACA9C,oBAAgBsF,aAAhB,CAA8B,YAA9B;AACAzC,WAAO7C,gBAAgBmD,MAAhB,CAAuBG,MAA9B,EAAsCR,OAAtC,CAA8C,CAA9C;AACD,GATD;;AAWAJ,KAAG,0CAAH,EAA+C,YAAM;AACnD,QAAMjC,cAAc;AAClB0C,cAAQ,CACN,EAAEpC,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EADM,EAEN,EAAEO,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAFM;AADU,KAApB;AAMA,QAAM+E,cAAcvF,gBAAgBwF,yBAAhB,CAA0C/E,WAA1C,CAApB;AACAoC,WAAO0C,YAAY/E,EAAnB,EAAuBsC,OAAvB,CAA+B,YAA/B;AACD,GATD;;AAWAJ,KAAG,wBAAH,EAA6B,YAAM;AACjC1C,oBAAgBmD,MAAhB,GAAyB,CACvB,EAAEpC,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAAqC4C,MAAM,IAA3C,EADuB,EAEvB,EAAErC,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAAqC4C,MAAM,IAA3C,EAFuB,CAAzB;AAIAP,WAAO7C,gBAAgBmD,MAAhB,CAAuB,CAAvB,EAA0BC,IAAjC,EAAuCN,OAAvC,CAA+C,IAA/C;AACAD,WAAO7C,gBAAgBmD,MAAhB,CAAuB,CAAvB,EAA0BC,IAAjC,EAAuCN,OAAvC,CAA+C,IAA/C;AACA9C,oBAAgByF,aAAhB;AACA5C,WAAO7C,gBAAgBmD,MAAhB,CAAuB,CAAvB,EAA0BC,IAAjC,EAAuCN,OAAvC,CAA+C,KAA/C;AACAD,WAAO7C,gBAAgBmD,MAAhB,CAAuB,CAAvB,EAA0BC,IAAjC,EAAuCN,OAAvC,CAA+C,KAA/C;AACD,GAVD;;AAYAJ,KAAG,kCAAH,EAAuC,YAAM;AAC3C,QAAMgD,QAAQ1F,gBAAgB2F,cAAhB,CAA+B,YAA/B,CAAd;AACA9C,WAAO6C,MAAMlF,EAAb,EAAiBsC,OAAjB,CAAyB,YAAzB;AACAD,WAAO6C,MAAM3E,IAAb,EAAmB+B,OAAnB,CAA2B,EAA3B;AACAD,WAAO6C,MAAMzD,MAAN,CAAaqB,MAApB,EAA4BR,OAA5B,CAAoC,CAApC;AACAD,WAAO6C,MAAMtC,IAAb,EAAmBN,OAAnB,CAA2B,IAA3B;AACD,GAND;;AAQAJ,KAAG,sBAAH,EAA2B,YAAM;AAC/B,QAAMT,SAAS;AACblB,YAAM,UADO;AAEbmB,YAAM,EAFO;AAGbC,aAAO,MAHM;AAIbC,eAAS,IAJI;AAKbwD,wBAAkB;AALL,KAAf;AAOA,QAAMC,YAAY7F,gBAAgB8F,UAAhB,CAA2B7D,MAA3B,CAAlB;AACAY,WAAOgD,UAAU9E,IAAjB,EAAuB+B,OAAvB,CAA+B,UAA/B;AACAD,WAAOgD,UAAU3D,IAAV,CAAeoB,MAAtB,EAA8BR,OAA9B,CAAsC,CAAtC;AACAD,WAAOgD,UAAU1D,KAAjB,EAAwBW,OAAxB,CAAgC,MAAhC;AACAD,WAAOgD,UAAUzD,OAAjB,EAA0BU,OAA1B,CAAkC,KAAlC;AACAD,WAAOgD,UAAUD,gBAAjB,EAAmC9C,OAAnC,CAA2C,KAA3C;AACD,GAdD;;AAgBAJ,KAAG,0CAAH,EAA+C,YAAM;AACnD1C,oBAAgBmD,MAAhB,GAAyB,CACvB,EAAEpC,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAAqCyB,QAAQ,EAA7C,EADuB,CAAzB;AAGAY,WAAO7C,gBAAgBmD,MAAhB,CAAuBG,MAA9B,EAAsCR,OAAtC,CAA8C,CAA9C;AACA,QAAMiD,2BAA2B,CAAjC;AACA/F,oBAAgBgG,6BAAhB,CAA8CD,wBAA9C;AACAlD,WAAO7C,gBAAgBmD,MAAhB,CAAuBG,MAA9B,EAAsCR,OAAtC,CAA8C,CAA9C;AACD,GARD;;AAUAJ,KAAG,6CAAH,EAAkD,YAAM;AACtD,QAAMuD,SAAS,EAAEhE,QAAQ,EAAV,EAAf;AACAY,WAAO7C,gBAAgBkG,qBAAhB,CAAsCD,MAAtC,CAAP,EAAsDnD,OAAtD,CAA8D,IAA9D;AACA,QAAMqD,SAAS,EAAElE,QAAQ,CAAE,EAAEzB,IAAI,UAAN,EAAF,EAAsB,EAAEA,IAAI,UAAN,EAAtB,CAAV,EAAf;AACAqC,WAAO7C,gBAAgBkG,qBAAhB,CAAsCC,MAAtC,CAAP,EAAsDrD,OAAtD,CAA8D,KAA9D;AACD,GALD;;AAOAJ,KAAG,mCAAH,EAAwC,YAAM;AAC5C,QAAM6B,UAAU,CAAE,EAAErC,MAAM,EAAR,EAAF,CAAhB;AACAW,WAAO7C,gBAAgBoG,aAAhB,CAA8B7B,OAA9B,CAAP,EAA+CzB,OAA/C,CAAuD,IAAvD;AACA,QAAM0B,UAAU,CACd,EAAEhE,IAAI,UAAN,EAAkB0B,MAAM,CAAC,CAAC,CAAD,EAAI,EAAJ,CAAD,CAAxB,EADc,CAAhB;AAGAW,WAAO7C,gBAAgBoG,aAAhB,CAA8B5B,OAA9B,CAAP,EAA+C1B,OAA/C,CAAuD,KAAvD;AACD,GAPD;;AASAJ,KAAG,sCAAH,EAA2C,YAAM;AAC/C1C,oBAAgBmD,MAAhB,GAAyB,CACvB,EAAEpC,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAAqC4C,MAAM,IAA3C,EADuB,CAAzB;AAGA,QAAMiD,UAAU,CAAhB;AACArG,oBAAgBsG,yBAAhB,CAA0CD,OAA1C;AACAxD,WAAO7C,gBAAgBmD,MAAhB,CAAuBG,MAA9B,EAAsCR,OAAtC,CAA8C,CAA9C;AACD,GAPD;;AASAJ,KAAG,gDAAH,EAAqD,YAAM;AACzD1C,oBAAgBmD,MAAhB,GAAyB,CACvB,EAAEpC,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAAqC4C,MAAM,IAA3C,EADuB,CAAzB;AAGA,QAAMiD,UAAU,YAAhB;AACArG,oBAAgBsG,yBAAhB,CAA0CD,OAA1C;AACAxD,WAAO7C,gBAAgBmD,MAAhB,CAAuBG,MAA9B,EAAsCR,OAAtC,CAA8C,CAA9C;AACD,GAPD;;AASAJ,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAM6D,WAAW;AACftE,cAAQ,CAAE,EAAEzB,IAAI,UAAN,EAAF;AADO,KAAjB;AAGA,QAAMkE,WAAW;AACfzC,cAAQ;AADO,KAAjB;AAGA,QAAMxB,cAAc,EAApB;AACA,QAAMqD,SAAS,EAAf;AACAjB,WAAO6B,SAASzC,MAAT,CAAgBqB,MAAvB,EAA+BR,OAA/B,CAAuC,CAAvC;AACA9C,oBAAgBwG,mBAAhB,CAAoCD,QAApC,EAA8C7B,QAA9C,EAAwDjE,WAAxD,EAAqEqD,MAArE;AACAjB,WAAO6B,SAASzC,MAAT,CAAgBqB,MAAvB,EAA+BR,OAA/B,CAAuC,CAAvC;AACD,GAZD;;AAcAJ,KAAG,6BAAH,EAAkC,YAAM;AACtC,QAAM6D,WAAW;AACfxF,YAAM;AADS,KAAjB;AAGA,QAAM2D,WAAW;AACf3D,YAAM;AADS,KAAjB;AAGA8B,WAAO6B,SAAS3D,IAAhB,EAAsB+B,OAAtB,CAA8B,SAA9B;AACA9C,oBAAgByG,sBAAhB,CAAuCF,QAAvC,EAAiD7B,QAAjD;AACA7B,WAAO6B,SAAS3D,IAAhB,EAAsB+B,OAAtB,CAA8B,SAA9B;AACD,GAVD;;AAYAJ,KAAG,4BAAH,EAAiC,YAAM;AACrC,QAAMuD,SAAS,EAAElF,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAAf;AACA,QAAM2F,SAAS,EAAEpF,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAAf;AACA,QAAMkG,SAAS,EAAE3F,MAAM,SAAR,EAAmBP,IAAI,YAAvB,EAAf;AACAR,oBAAgBmD,MAAhB,GAAyB,CACvB8C,MADuB,EAEvBE,MAFuB,EAGvBO,MAHuB,CAAzB;AAKA7D,WAAO7C,gBAAgB2G,YAAhB,CAA6B,YAA7B,CAAP,EAAmD7D,OAAnD,CAA2DmD,MAA3D;AACApD,WAAO7C,gBAAgB2G,YAAhB,CAA6B,YAA7B,CAAP,EAAmD7D,OAAnD,CAA2DqD,MAA3D;AACAtD,WAAO7C,gBAAgB2G,YAAhB,CAA6B,YAA7B,CAAP,EAAmD7D,OAAnD,CAA2D4D,MAA3D;AACD,GAZD;;AAcAhE,KAAG,6CAAH,EAAkD,YAAM;AACtD1C,oBAAgBiC,MAAhB,GAAyB,CACvB,EAAEzB,IAAI,UAAN,EAAkB4B,SAAS,KAA3B,EADuB,CAAzB;AAGAS,WAAO7C,gBAAgB4G,iBAAhB,EAAP,EAA4C9D,OAA5C,CAAoD,KAApD;AACA9C,oBAAgBiC,MAAhB,GAAyB,CACvB,EAAEzB,IAAI,UAAN,EAAkB4B,SAAS,IAA3B,EADuB,CAAzB;AAGAS,WAAO7C,gBAAgB4G,iBAAhB,EAAP,EAA4C9D,OAA5C,CAAoD,IAApD;AACA,QAAM+D,SAAS;AACbrG,UAAI,QADS;AAEbyB,cAAQ,CACN;AACEzB,YAAI,SADN;AAEE4B,iBAAS;AAFX,OADM,EAKN;AACE5B,YAAI,SADN;AAEE4B,iBAAS;AAFX,OALM;AAFK,KAAf;AAaAS,WAAO7C,gBAAgB4G,iBAAhB,CAAkCC,OAAO5E,MAAzC,CAAP,EAAyDa,OAAzD,CAAiE,KAAjE;AACA,QAAMmD,SAAS;AACbzF,UAAI,QADS;AAEbyB,cAAQ,CACN;AACEzB,YAAI,SADN;AAEE4B,iBAAS;AAFX,OADM,EAKN;AACE5B,YAAI,SADN;AAEE4B,iBAAS;AAFX,OALM;AAFK,KAAf;AAaAS,WAAO7C,gBAAgB4G,iBAAhB,CAAkCX,OAAOhE,MAAzC,CAAP,EAAyDa,OAAzD,CAAiE,IAAjE;AACD,GArCD;;AAuCAJ,KAAG,2BAAH,EAAgC,YAAM;AACpC,QAAMT,SAAS,CACb,EAAEzB,IAAI,UAAN,EAAkB0B,MAAM,CAAC,CAAC,CAAD,EAAI,EAAJ,CAAD,EAAU,CAAC,EAAD,EAAK,GAAL,CAAV,CAAxB,EADa,CAAf;AAGA,QAAM4E,eAAe9G,gBAAgB+G,eAAhB,CAAgC9E,MAAhC,CAArB;AACAY,WAAOiE,aAAaE,IAApB,EAA0BlE,OAA1B,CAAkC,CAAlC;AACAD,WAAOiE,aAAaG,IAApB,EAA0BnE,OAA1B,CAAkC,EAAlC;AACAD,WAAOiE,aAAaI,IAApB,EAA0BpE,OAA1B,CAAkC,CAAlC;AACAD,WAAOiE,aAAaK,IAApB,EAA0BrE,OAA1B,CAAkC,GAAlC;AACD,GATD;;AAWAJ,KAAG,mCAAH,EAAwC,YAAM;AAC5C,QAAMT,SAAS,CACb,EAAEzB,IAAI,UAAN,EAAkB0B,MAAM,CAAC,CAAC,CAAC,EAAF,EAAM,CAAC,EAAP,CAAD,EAAa,CAAC,IAAD,EAAO,IAAP,CAAb,CAAxB,EADa,CAAf;AAGA,QAAMT,QAAQ,EAAEG,KAAK,CAAP,EAAUC,KAAK,GAAf,EAAd;AACA,QAAMG,QAAQ,EAAEJ,KAAK,CAAP,EAAUC,KAAK,GAAf,EAAd;AACA7B,oBAAgBoH,sBAAhB,CAAuCnF,MAAvC,EAA+CR,KAA/C,EAAsDO,KAAtD;AACAa,WAAOpB,MAAMG,GAAb,EAAkBkB,OAAlB,CAA0B,IAA1B;AACAD,WAAOpB,MAAMI,GAAb,EAAkBiB,OAAlB,CAA0B,IAA1B;AACAD,WAAOb,MAAMJ,GAAb,EAAkBkB,OAAlB,CAA0B,IAA1B;AACAD,WAAOb,MAAMH,GAAb,EAAkBiB,OAAlB,CAA0B,IAA1B;AACD,GAXD;;AAaAJ,KAAG,yBAAH,EAA8B,YAAM;AAClC,QAAMT,SAAS,CACb,EAAEzB,IAAI,UAAN,EADa,EAEb,EAAEA,IAAI,UAAN,EAFa,CAAf;AAIAR,oBAAgBqH,cAAhB,CAA+BpF,MAA/B;AACAY,WAAOZ,OAAO,CAAP,EAAUzB,EAAjB,EAAqBsC,OAArB,CAA6B,IAA7B;AACAD,WAAOZ,OAAO,CAAP,EAAUzB,EAAjB,EAAqBsC,OAArB,CAA6B,IAA7B;AACD,GARD;;AAUAJ,KAAG,oCAAH,EAAyC,YAAM;AAC7C,QAAM4E,gCAAN;AAEAtH,oBAAgB2D,YAAhB,GAA+B,EAA/B;AACA3D,oBAAgBuH,uBAAhB,CAAwCD,SAAxC;AACAzE,WAAO7C,gBAAgB2D,YAAhB,CAA6BzB,IAA7B,CAAkC,CAAlC,EAAqC,CAArC,CAAP,EAAgDY,OAAhD,CAAwD,CAAxD;AACAD,WAAO7C,gBAAgB2D,YAAhB,CAA6BzB,IAA7B,CAAkC,CAAlC,EAAqC,CAArC,CAAP,EAAgDY,OAAhD,CAAwD,GAAxD;AACAD,WAAO7C,gBAAgB2D,YAAhB,CAA6BzB,IAA7B,CAAkC,CAAlC,EAAqC,CAArC,CAAP,EAAgDY,OAAhD,CAAwD,EAAxD;AACAD,WAAO7C,gBAAgB2D,YAAhB,CAA6BzB,IAA7B,CAAkC,CAAlC,EAAqC,CAArC,CAAP,EAAgDY,OAAhD,CAAwD,GAAxD;AACD,GATD;;AAWAJ,KAAG,6DAAH,EAAkE,YAAM;AACtE,QAAMT,SAAS;AACbC,YAAM,CAAC,CAAC,CAAD,EAAI,GAAJ,CAAD,EAAU,CAAC,EAAD,EAAK,GAAL,CAAV;AADO,KAAf;AAGA,QAAMsF,YAAY,YAAlB;AACAxH,oBAAgByH,uBAAhB,CAAwCxF,MAAxC,EAAgDuF,SAAhD;AACA3E,WAAOZ,OAAOC,IAAP,CAAY,CAAZ,CAAP,EAAuBY,OAAvB,CAA+B,GAA/B;AACAD,WAAOZ,OAAOC,IAAP,CAAY,CAAZ,CAAP,EAAuBY,OAAvB,CAA+B,GAA/B;AACD,GARD;;AAUAJ,KAAG,6DAAH,EAAkE,YAAM;AACtE,QAAMT,SAAS;AACbC,YAAM,CAAC,GAAD,EAAM,GAAN;AADO,KAAf;AAGA,QAAMsF,YAAY,QAAlB;AACAxH,oBAAgByH,uBAAhB,CAAwCxF,MAAxC,EAAgDuF,SAAhD;AACA3E,WAAOZ,OAAOC,IAAP,CAAY,CAAZ,EAAe,CAAf,CAAP,EAA0BY,OAA1B,CAAkC,GAAlC;AACAD,WAAOZ,OAAOC,IAAP,CAAY,CAAZ,EAAe,CAAf,CAAP,EAA0BY,OAA1B,CAAkC,GAAlC;AACD,GARD;;AAUAJ,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAMgF,IAAI,EAAV;AACA1H,oBAAgB2H,mBAAhB,CAAoCD,CAApC;AACA7E,WAAO7C,gBAAgB4H,SAAhB,CAA0BtE,MAAjC,EAAyCR,OAAzC,CAAiD,CAAjD;AACAD,WAAO7C,gBAAgB4H,SAAhB,CAA0B,CAA1B,EAA6BC,KAApC,EAA2C/E,OAA3C,CAAmD,EAAnD;AACD,GALD;;AAOAJ,KAAG,8BAAH,EAAmC,YAAM;AACvC,QAAMoF,qBAAqB;AACzBrH,mBAAa;AACX0C,gBAAQ,CACN,EAAE3C,IAAI,YAAN,EAAoBO,MAAM,SAA1B,EAAqCkB,QAAQ,EAA7C,EADM;AADG;AADY,KAA3B;AAOA,QAAM8F,0BAA0B;AAC9BtH,mBAAa;AACX0C,gBAAQ,CACN,EAAE3C,IAAI,YAAN,EAAoBO,MAAM,SAA1B,EAAqCkB,QAAQ,EAA7C,EADM;AADG;AADiB,KAAhC;AAOA,QAAM+F,cAAc,CAClB;AACEjH,YAAM,QADR;AAEEkH,YAAM,QAFR;AAGEC,cAAQ;AAHV,KADkB,CAApB;AAOA,QAAMC,YAAY,KAAlB;AACAtF,WAAOiF,mBAAmBrH,WAAnB,CAA+B0C,MAA/B,CAAsC,CAAtC,EAAyCpC,IAAhD,EAAsD+B,OAAtD,CAA8D,SAA9D;AACA9C,oBAAgBoI,mBAAhB,CACEN,kBADF,EACsBC,uBADtB,EAC+CC,WAD/C,EAC4DG,SAD5D;AAEAtF,WAAOiF,mBAAmBrH,WAAnB,CAA+B0C,MAA/B,CAAsC,CAAtC,EAAyCpC,IAAhD,EAAsD+B,OAAtD,CAA8D,SAA9D;AACD,GA3BD;;AA6BAJ,KAAG,4CAAH,EAAiD,YAAM;AACrD,QAAM2F,gBAAgB,CACpB;AACEC,eAAS,MADX;AAEEC,eAAS,KAFX;AAGEC,gBAAU,UAHZ;AAIEC,iBAAW;AAJb,KADoB,EAOpB;AACEH,eAAS,MADX;AAEEC,eAAS,MAFX;AAGEC,gBAAU,UAHZ;AAIEC,iBAAW;AAJb,KAPoB,CAAtB;AAcA,QAAMC,mBAAmB1I,gBAAgB2I,8BAAhB,CAA+CN,aAA/C,CAAzB;AACAxF,WAAO6F,iBAAiBpF,MAAxB,EAAgCR,OAAhC,CAAwC,CAAxC;AACAD,WAAO6F,iBAAiB,CAAjB,CAAP,EAA4B5F,OAA5B,CAAoC,oBAApC;AACAD,WAAO6F,iBAAiB,CAAjB,CAAP,EAA4B5F,OAA5B,CAAoC,qBAApC;AACD,GAnBD;;AAqBAJ,KAAG,gEAAH,EAAqE,YAAM;AACzE,QAAM2F,gBAAgB,IAAtB;AACA,QAAMK,mBAAmB1I,gBAAgB2I,8BAAhB,CAA+CN,aAA/C,CAAzB;AACAxF,WAAO6F,iBAAiBpF,MAAxB,EAAgCR,OAAhC,CAAwC,CAAxC;AACD,GAJD;;AAMAJ,KAAG,2CAAH,EAAgD,YAAM;AACpD,QAAMjC,cAAc;AAClB4H,qBAAe,CACb;AACEC,iBAAS,MADX;AAEEC,iBAAS,KAFX;AAGEC,kBAAU,UAHZ;AAIEC,mBAAW;AAJb,OADa,EAOb;AACEH,iBAAS,MADX;AAEEC,iBAAS,MAFX;AAGEC,kBAAU,UAHZ;AAIEC,mBAAW;AAJb,OAPa;AADG,KAApB;AAgBA,QAAM3E,SAAS,EAAf;AACA,QAAM/C,OAAO,eAAb;AACAf,oBAAgBmD,MAAhB,GAAyB,CACvB,EAAE3C,IAAI,oBAAN,EADuB,EAEvB,EAAEA,IAAI,qBAAN,EAFuB,EAGvB,EAAEA,IAAI,gBAAN,EAHuB,EAIvB,EAAEA,IAAI,iBAAN,EAJuB,CAAzB;AAMAR,oBAAgB4I,0CAAhB,CAA2DnI,WAA3D,EAAwEqD,MAAxE,EAAgF/C,IAAhF;AACA8B,WAAO7C,gBAAgBmD,MAAhB,CAAuB,CAAvB,EAA0BC,IAAjC,EAAuCN,OAAvC,CAA+C,IAA/C;AACAD,WAAO7C,gBAAgBmD,MAAhB,CAAuB,CAAvB,EAA0BC,IAAjC,EAAuCN,OAAvC,CAA+C,IAA/C;AACAD,WAAO7C,gBAAgBmD,MAAhB,CAAuB,CAAvB,EAA0BC,IAAjC,EAAuCN,OAAvC,CAA+C,KAA/C;AACAD,WAAO7C,gBAAgBmD,MAAhB,CAAuB,CAAvB,EAA0BC,IAAjC,EAAuCN,OAAvC,CAA+C,KAA/C;AACD,GA9BD;;AAgCAJ,KAAG,mBAAH,EAAwB,YAAM;AAC5B1C,oBAAgBmD,MAAhB,GAAyB,CACvB,EAAE3C,IAAI,YAAN,EADuB,CAAzB;AAGA,QAAMqI,iBAAiB;AACrBpI,mBAAa;AACX0C,gBAAQ,CACN,EAAE3C,IAAI,YAAN,EADM,EAEN,EAAEA,IAAI,YAAN,EAFM;AADG;AADQ,KAAvB;AAQAR,oBAAgB8I,SAAhB,GAA4B,CAACD,cAAD,CAA5B;AACA7I,oBAAgB+I,WAAhB;AACAlG,WAAO7C,gBAAgB8I,SAAhB,CAA0BxF,MAAjC,EAAyCR,OAAzC,CAAiD,CAAjD;AACAD,WAAO7C,gBAAgBgJ,sBAAvB,EAA+ClG,OAA/C,CAAuD+F,cAAvD;AACAhG,WAAO7C,gBAAgBmD,MAAhB,CAAuB,CAAvB,EAA0B3C,EAAjC,EAAqCsC,OAArC,CAA6C,YAA7C;AACAD,WAAO7C,gBAAgBmD,MAAhB,CAAuB,CAAvB,EAA0B3C,EAAjC,EAAqCsC,OAArC,CAA6C,YAA7C;AACD,GAlBD;;AAoBAJ,KAAG,kCAAH,EAAuC,YAAM;AAC3C1C,oBAAgBsC,gBAAhB,GAAmC;AACjCb,aAAO;AACLwH,oBAAY,CACV,WADU,EAEV,QAFU,EAGV,QAHU;AADP;AAD0B,KAAnC;AASApG,WAAO7C,gBAAgBkJ,kBAAhB,CAAmC,CAAnC,CAAP,EAA8CpG,OAA9C,CAAsD,WAAtD;AACAD,WAAO7C,gBAAgBkJ,kBAAhB,CAAmC,CAAnC,CAAP,EAA8CpG,OAA9C,CAAsD,QAAtD;AACAD,WAAO7C,gBAAgBkJ,kBAAhB,CAAmC,CAAnC,CAAP,EAA8CpG,OAA9C,CAAsD,QAAtD;AACD,GAbD;;AAeAJ,KAAG,wCAAH,EAA6C,YAAM;AACjD,QAAMyG,kBAAkB,EAAEzB,GAAG,EAAL,EAAS0B,GAAG,EAAZ,EAAxB;AACA,QAAMC,iBAAiB,CAAC,GAAD,EAAM,GAAN,CAAvB;AACAxG,WAAO7C,gBAAgBsJ,sBAAhB,CAAuCH,eAAvC,CAAP,EAAgErG,OAAhE,CAAwE,EAAxE;AACAD,WAAO7C,gBAAgBsJ,sBAAhB,CAAuCD,cAAvC,CAAP,EAA+DvG,OAA/D,CAAuE,GAAvE;AACD,GALD;;AAOAJ,KAAG,wCAAH,EAA6C,YAAM;AACjD,QAAMyG,kBAAkB,EAAEzB,GAAG,EAAL,EAAS0B,GAAG,EAAZ,EAAxB;AACA,QAAMC,iBAAiB,CAAC,GAAD,EAAM,GAAN,CAAvB;AACAxG,WAAO7C,gBAAgBuJ,sBAAhB,CAAuCJ,eAAvC,CAAP,EAAgErG,OAAhE,CAAwE,EAAxE;AACAD,WAAO7C,gBAAgBuJ,sBAAhB,CAAuCF,cAAvC,CAAP,EAA+DvG,OAA/D,CAAuE,GAAvE;AACD,GALD;;AAOAJ,KAAG,0CAAH,EAA+C,YAAM;AACnD1C,oBAAgBwJ,eAAhB,GAAkC,CAAC,EAAE9B,GAAG,EAAL,EAAS0B,GAAG,EAAZ,EAAD,EAAmB,EAAE1B,GAAG,EAAL,EAAS0B,GAAG,EAAZ,EAAnB,CAAlC;AACAvG,WAAO7C,gBAAgByJ,wBAAhB,EAAP,EAAmD3G,OAAnD,CAA2D,EAA3D;AACA9C,oBAAgBwJ,eAAhB,GAAkC,CAAC,CAAC,GAAD,EAAM,GAAN,CAAD,EAAa,CAAC,GAAD,EAAM,GAAN,CAAb,CAAlC;AACA3G,WAAO7C,gBAAgByJ,wBAAhB,EAAP,EAAmD3G,OAAnD,CAA2D,GAA3D;AACD,GALD;;AAOAJ,KAAG,0CAAH,EAA+C,YAAM;AACnD1C,oBAAgBwJ,eAAhB,GAAkC,CAAC,EAAE9B,GAAG,EAAL,EAAS0B,GAAG,EAAZ,EAAD,EAAmB,EAAE1B,GAAG,EAAL,EAAS0B,GAAG,EAAZ,EAAnB,CAAlC;AACAvG,WAAO7C,gBAAgB0J,wBAAhB,EAAP,EAAmD5G,OAAnD,CAA2D,EAA3D;AACA9C,oBAAgBwJ,eAAhB,GAAkC,CAAC,CAAC,GAAD,EAAM,GAAN,CAAD,EAAa,CAAC,GAAD,EAAM,GAAN,CAAb,CAAlC;AACA3G,WAAO7C,gBAAgB0J,wBAAhB,EAAP,EAAmD5G,OAAnD,CAA2D,GAA3D;AACD,GALD;;AAOAJ,KAAG,4BAAH,EAAiC,YAAM;AACrC,QAAMT,SAAS;AACbC,YAAM,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,EAAW,CAAC,GAAD,EAAM,GAAN,CAAX;AADO,KAAf;AAGAW,WAAOZ,OAAOC,IAAP,CAAYoB,MAAnB,EAA2BR,OAA3B,CAAmC,CAAnC;AACA9C,oBAAgB2J,gBAAhB,CAAiC1H,MAAjC,EAAyC,IAAzC,EAA+C,IAA/C;AACAY,WAAOZ,OAAOC,IAAP,CAAYoB,MAAnB,EAA2BR,OAA3B,CAAmC,CAAnC;AACAD,WAAOZ,OAAOC,IAAP,CAAY,CAAZ,EAAe,CAAf,CAAP,EAA0BY,OAA1B,CAAkC,IAAlC;AACAD,WAAOZ,OAAOC,IAAP,CAAY,CAAZ,EAAe,CAAf,CAAP,EAA0BY,OAA1B,CAAkC,IAAlC;AACD,GATD;;AAWAJ,KAAG,iCAAH,EAAsC,YAAM;AAC1C,QAAMT,SAAS;AACbC,YAAM,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,EAAW,CAAC,GAAD,EAAM,GAAN,CAAX;AADO,KAAf;AAGAW,WAAOZ,OAAOC,IAAP,CAAYoB,MAAnB,EAA2BR,OAA3B,CAAmC,CAAnC;AACA9C,oBAAgB4J,qBAAhB,CAAsC3H,MAAtC,EAA8C,EAA9C;AACAY,WAAOZ,OAAOC,IAAP,CAAYoB,MAAnB,EAA2BR,OAA3B,CAAmC,CAAnC;AACAD,WAAOZ,OAAOC,IAAP,CAAY,CAAZ,EAAe,CAAf,CAAP,EAA0BY,OAA1B,CAAkC,GAAlC;AACAD,WAAOZ,OAAOC,IAAP,CAAY,CAAZ,EAAe,CAAf,CAAP,EAA0BY,OAA1B,CAAkC,GAAlC;AACD,GATD;;AAWAJ,KAAG,4BAAH,EAAiC,YAAM;AACrC,QAAMmE,SAAS,EAAf;AACA,QAAMZ,SAAS,EAAf;AACA,QAAME,SAAS,EAAf;AACAnG,oBAAgBmD,MAAhB,GAAyB,CACvB0D,MADuB,EAEvBZ,MAFuB,EAGvBE,MAHuB,CAAzB;AAKAtD,WAAO7C,gBAAgB6J,aAAhB,CAA8BhD,MAA9B,CAAP,EAA8C/D,OAA9C,CAAsD,CAAtD;AACAD,WAAO7C,gBAAgB6J,aAAhB,CAA8B5D,MAA9B,CAAP,EAA8CnD,OAA9C,CAAsD,CAAtD;AACAD,WAAO7C,gBAAgB6J,aAAhB,CAA8B1D,MAA9B,CAAP,EAA8CrD,OAA9C,CAAsD,CAAtD;AACD,GAZD;;AAcAJ,KAAG,gCAAH,EAAqC,YAAM;AACzC,QAAMmE,SAAS,EAAf;AACA,QAAMZ,SAAS,EAAf;AACA,QAAME,SAAS,EAAf;AACAnG,oBAAgBmD,MAAhB,GAAyB,CACvB0D,MADuB,EAEvBZ,MAFuB,EAGvBE,MAHuB,CAAzB;AAKA,QAAM2D,WAAW,EAAjB;AACA,QAAMpI,QAAQ,UAAd;AACA,QAAMD,QAAQ;AACZG,WAAK,CADO;AAEZC,WAAK;AAFO,KAAd;AAIA,QAAMG,QAAQ;AACZJ,WAAK,CADO;AAEZC,WAAK;AAFO,KAAd;AAIA,QAAMI,SAAS,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,EAAW,CAAC,GAAD,EAAM,GAAN,CAAX,CAAf;AACA,QAAM8H,WAAW,IAAjB;AACA,QAAMC,cAAchK,gBAAgBiK,iBAAhB,CAAkCH,QAAlC,EAA4CpI,KAA5C,EAAmDD,KAAnD,EAA0DO,KAA1D,EAAiEC,MAAjE,EAAyE8H,QAAzE,CAApB;AACAlH,WAAOmH,YAAYtI,KAAZ,CAAkBC,IAAzB,EAA+BmB,OAA/B,CAAuC,UAAvC;AACAD,WAAOmH,YAAYvI,KAAZ,CAAkBG,GAAzB,EAA8BkB,OAA9B,CAAsC,CAAtC;AACAD,WAAOmH,YAAYvI,KAAZ,CAAkBI,GAAzB,EAA8BiB,OAA9B,CAAsC,GAAtC;AACAD,WAAOmH,YAAYhI,KAAZ,CAAkBJ,GAAzB,EAA8BkB,OAA9B,CAAsC,CAAtC;AACAD,WAAOmH,YAAYhI,KAAZ,CAAkBH,GAAzB,EAA8BiB,OAA9B,CAAsC,EAAtC;AACAD,WAAOmH,YAAY/H,MAAnB,EAA2Ba,OAA3B,CAAmCb,MAAnC;AACAY,WAAOmH,YAAYE,OAAZ,CAAoBC,KAApB,CAA0BJ,QAAjC,EAA2CjH,OAA3C,CAAmD,IAAnD;AACD,GA7BD;;AA+BAJ,KAAG,sCAAH,EAA2C,YAAM;AAC/C,QAAM0H,iBAAiB,CACrB,EAAE5J,IAAI,SAAN,EAAiB4B,SAAS,IAA1B,EADqB,EAErB,EAAE5B,IAAI,SAAN,EAAiB4B,SAAS,KAA1B,EAFqB,EAGrB,EAAE5B,IAAI,SAAN,EAAiB4B,SAAS,IAA1B,EAHqB,CAAvB;AAKAS,WAAO7C,gBAAgBqK,gBAAhB,CAAiCD,cAAjC,EAAiD,CAAjD,CAAP,EAA4DtH,OAA5D,CAAoE,IAApE;AACAD,WAAO7C,gBAAgBqK,gBAAhB,CAAiCD,cAAjC,EAAiD,CAAjD,CAAP,EAA4DtH,OAA5D,CAAoE,KAApE;AACAD,WAAO7C,gBAAgBqK,gBAAhB,CAAiCD,cAAjC,EAAiD,CAAjD,CAAP,EAA4DtH,OAA5D,CAAoE,IAApE;AACD,GATD;;AAWAJ,KAAG,6CAAH,EAAkD,YAAM;AACtD,QAAM4H,kBAAkB,CACtB,EAAE9J,IAAI,SAAN,EAAiB4B,SAAS,IAA1B,EADsB,EAEtB,EAAE5B,IAAI,SAAN,EAAiB4B,SAAS,KAA1B,EAFsB,EAGtB,EAAE5B,IAAI,SAAN,EAAiB4B,SAAS,KAA1B,EAHsB,CAAxB;AAKAS,WAAO7C,gBAAgBuK,4BAAhB,CAA6CD,eAA7C,CAAP,EAAsExH,OAAtE,CAA8E,CAA9E;AACA,QAAM0H,kBAAkB,CACtB,EAAEhK,IAAI,SAAN,EAAiB4B,SAAS,IAA1B,EADsB,EAEtB,EAAE5B,IAAI,SAAN,EAAiB4B,SAAS,IAA1B,EAFsB,EAGtB,EAAE5B,IAAI,SAAN,EAAiB4B,SAAS,KAA1B,EAHsB,CAAxB;AAKAS,WAAO7C,gBAAgBuK,4BAAhB,CAA6CC,eAA7C,CAAP,EAAsE1H,OAAtE,CAA8E,CAA9E;AACA,QAAM2H,kBAAkB,CACtB,EAAEjK,IAAI,SAAN,EAAiB4B,SAAS,IAA1B,EADsB,EAEtB,EAAE5B,IAAI,SAAN,EAAiB4B,SAAS,KAA1B,EAFsB,EAGtB,EAAE5B,IAAI,SAAN,EAAiB4B,SAAS,IAA1B,EAHsB,CAAxB;AAKAS,WAAO7C,gBAAgBuK,4BAAhB,CAA6CE,eAA7C,CAAP,EAAsE3H,OAAtE,CAA8E,CAA9E;AACA,QAAM4H,kBAAkB,CACtB,EAAElK,IAAI,SAAN,EAAiB4B,SAAS,KAA1B,EADsB,EAEtB,EAAE5B,IAAI,SAAN,EAAiB4B,SAAS,KAA1B,EAFsB,EAGtB,EAAE5B,IAAI,SAAN,EAAiB4B,SAAS,KAA1B,EAHsB,CAAxB;AAKAS,WAAO7C,gBAAgBuK,4BAAhB,CAA6CG,eAA7C,CAAP,EAAsE5H,OAAtE,CAA8E,IAA9E;AACD,GAzBD;;AA2BAJ,KAAG,yCAAH,EAA8C,YAAM;AAClD,QAAMmE,SAAS;AACbrG,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUA,QAAM6D,SAAS;AACbzF,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUA,QAAM+D,SAAS;AACb3F,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUApC,oBAAgBmD,MAAhB,GAAyB,CACvB0D,MADuB,EAEvBZ,MAFuB,EAGvBE,MAHuB,CAAzB;AAKAnG,oBAAgBgF,WAAhB,GAA8BiB,MAA9B;AACAjG,oBAAgB2D,YAAhB,GAA+BsC,OAAOhE,MAAP,CAAc,CAAd,CAA/B;AACAjC,oBAAgB2K,sBAAhB,GAAyC,CAAC,YAAD,EAAe,YAAf,CAAzC;AACA3K,oBAAgB+E,cAAhB,GAAiC,CAAC,YAAD,EAAe,YAAf,EAA6B,YAA7B,CAAjC;AACA,QAAM6F,wBAAwBC,MAAM7K,eAAN,EAAuB,oBAAvB,EAA6C8K,GAA7C,CAAiDC,QAAjD,CAA0D,YAAM,CAAE,CAAlE,CAA9B;AACA/K,oBAAgBgL,qBAAhB;AACAnI,WAAO7C,gBAAgBgF,WAAvB,EAAoClC,OAApC,CAA4CqD,MAA5C;AACAtD,WAAO7C,gBAAgB2D,YAAvB,EAAqCb,OAArC,CAA6CqD,OAAOlE,MAAP,CAAc,CAAd,CAA7C;AACAY,WAAO+H,qBAAP,EAA8BK,gBAA9B;AACD,GA7CD;;AA+CAvI,KAAG,+EAAH,EAAoF,YAAM;AACxF,QAAMmE,SAAS;AACbrG,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUA,QAAM6D,SAAS;AACbzF,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUA,QAAM+D,SAAS;AACb3F,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUApC,oBAAgBmD,MAAhB,GAAyB,CACvB0D,MADuB,EAEvBZ,MAFuB,EAGvBE,MAHuB,CAAzB;AAKAnG,oBAAgBgF,WAAhB,GAA8BiB,MAA9B;AACAjG,oBAAgB2D,YAAhB,GAA+BsC,OAAOhE,MAAP,CAAc,CAAd,CAA/B;AACA,QAAM8C,iBAAiB,CAAC,YAAD,EAAe,YAAf,EAA6B,YAA7B,CAAvB;AACA/E,oBAAgB+E,cAAhB,GAAiCA,cAAjC;AACA/E,oBAAgB2K,sBAAhB,GAAyC5F,cAAzC;AACA/E,oBAAgBgL,qBAAhB;AACAnI,WAAO7C,gBAAgBgF,WAAvB,EAAoClC,OAApC,CAA4CmD,MAA5C;AACApD,WAAO7C,gBAAgB2D,YAAvB,EAAqCb,OAArC,CAA6CmD,OAAOhE,MAAP,CAAc,CAAd,CAA7C;AACD,GA5CD;;AA8CAS,KAAG,6BAAH,EAAkC,YAAM;AACtC,QAAMmE,SAAS;AACbrG,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUA,QAAM6D,SAAS;AACbzF,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUA,QAAM+D,SAAS;AACb3F,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUApC,oBAAgBmD,MAAhB,GAAyB,CACvB0D,MADuB,EAEvBZ,MAFuB,EAGvBE,MAHuB,CAAzB;AAKAnG,oBAAgBiC,MAAhB,GAAyBgE,OAAOhE,MAAhC;AACAjC,oBAAgBgF,WAAhB,GAA8BiB,MAA9B;AACAjG,oBAAgB2D,YAAhB,GAA+BsC,OAAOhE,MAAP,CAAc,CAAd,CAA/B;AACA,QAAM8C,iBAAiB,CAAC,YAAD,EAAe,YAAf,CAAvB;AACA/E,oBAAgBkL,gBAAhB,CAAiCnG,cAAjC;AACAlC,WAAOgE,OAAOzD,IAAd,EAAoBN,OAApB,CAA4B,IAA5B;AACAD,WAAOoD,OAAO7C,IAAd,EAAoBN,OAApB,CAA4B,IAA5B;AACAD,WAAOsD,OAAO/C,IAAd,EAAoBN,OAApB,CAA4B,KAA5B;AACD,GA5CD;;AA8CAJ,KAAG,wDAAH,EAA6D,YAAM;AACjE,QAAMmE,SAAS;AACbrG,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUA,QAAM6D,SAAS;AACbzF,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUA,QAAM+D,SAAS;AACb3F,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUApC,oBAAgBmD,MAAhB,GAAyB,CACvB0D,MADuB,EAEvBZ,MAFuB,EAGvBE,MAHuB,CAAzB;AAKAnG,oBAAgBiC,MAAhB,GAAyBgE,OAAOhE,MAAhC;AACAjC,oBAAgBgF,WAAhB,GAA8BiB,MAA9B;AACAjG,oBAAgB2D,YAAhB,GAA+BsC,OAAOhE,MAAP,CAAc,CAAd,CAA/B;AACA,QAAM8C,iBAAiB,CAAC,YAAD,EAAe,YAAf,CAAvB;AACA/E,oBAAgBkL,gBAAhB,CAAiCnG,cAAjC;AACAlC,WAAOgE,OAAOzD,IAAd,EAAoBN,OAApB,CAA4B,IAA5B;AACAD,WAAOoD,OAAO7C,IAAd,EAAoBN,OAApB,CAA4B,KAA5B;AACAD,WAAOsD,OAAO/C,IAAd,EAAoBN,OAApB,CAA4B,IAA5B;AACAD,WAAO7C,gBAAgBiC,MAAvB,EAA+Ba,OAA/B,CAAuC,EAAvC;AACAD,WAAO7C,gBAAgBgF,WAAvB,EAAoClC,OAApC,CAA4C,IAA5C;AACAD,WAAO7C,gBAAgB2D,YAAvB,EAAqCb,OAArC,CAA6C,IAA7C;AACD,GA/CD;;AAiDAJ,KAAG,yDAAH,EAA8D,YAAM;AAClE,QAAMmE,SAAS;AACbrG,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUA,QAAM6D,SAAS;AACbzF,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUA,QAAM+D,SAAS;AACb3F,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUApC,oBAAgBmD,MAAhB,GAAyB,CACvB0D,MADuB,EAEvBZ,MAFuB,EAGvBE,MAHuB,CAAzB;AAKAnG,oBAAgBiC,MAAhB,GAAyBkE,OAAOlE,MAAhC;AACAjC,oBAAgBgF,WAAhB,GAA8BmB,MAA9B;AACAnG,oBAAgB2D,YAAhB,GAA+BwC,OAAOlE,MAAP,CAAc,CAAd,CAA/B;AACA,QAAM8C,iBAAiB,CAAC,YAAD,EAAe,YAAf,CAAvB;AACA/E,oBAAgBmL,uCAAhB,CAAwDpG,cAAxD;AACAlC,WAAO7C,gBAAgBiC,MAAvB,EAA+Ba,OAA/B,CAAuCmD,OAAOhE,MAA9C;AACAY,WAAO7C,gBAAgBgF,WAAvB,EAAoClC,OAApC,CAA4CmD,MAA5C;AACApD,WAAO7C,gBAAgB2D,YAAvB,EAAqCb,OAArC,CAA6CmD,OAAOhE,MAAP,CAAc,CAAd,CAA7C;AACD,GA5CD;;AA8CAS,KAAG,2EAAH,EAAgF,YAAM;AACpF,QAAMmE,SAAS;AACbrG,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUA,QAAM6D,SAAS;AACbzF,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUA,QAAM+D,SAAS;AACb3F,UAAI,YADS;AAEb4C,YAAM,IAFO;AAGbnB,cAAQ,CACN;AACEzB,YAAI,YADN;AAEE4B,iBAAS;AAFX,OADM;AAHK,KAAf;AAUApC,oBAAgBmD,MAAhB,GAAyB,CACvB0D,MADuB,EAEvBZ,MAFuB,EAGvBE,MAHuB,CAAzB;AAKAnG,oBAAgBiC,MAAhB,GAAyBgE,OAAOhE,MAAhC;AACAjC,oBAAgBgF,WAAhB,GAA8BiB,MAA9B;AACAjG,oBAAgB2D,YAAhB,GAA+BsC,OAAOhE,MAAP,CAAc,CAAd,CAA/B;AACA,QAAM8C,iBAAiB,CAAC,YAAD,EAAe,YAAf,EAA6B,YAA7B,CAAvB;AACA/E,oBAAgBmL,uCAAhB,CAAwDpG,cAAxD;AACAlC,WAAO7C,gBAAgBiC,MAAvB,EAA+Ba,OAA/B,CAAuCmD,OAAOhE,MAA9C;AACAY,WAAO7C,gBAAgBgF,WAAvB,EAAoClC,OAApC,CAA4CmD,MAA5C;AACApD,WAAO7C,gBAAgB2D,YAAvB,EAAqCb,OAArC,CAA6CmD,OAAOhE,MAAP,CAAc,CAAd,CAA7C;AACD,GA5CD;AA8CD,CAjlCD","file":"graphController.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('GraphController', () => {\n\n  let $controller;\n  let $rootScope;\n  let $scope;\n  let $httpBackend;\n  let graphController;\n  let component;\n  const createComponentState = (componentStateId, nodeId, componentId, componentStateIdReplyingTo, response) => {\n    return {\n      id: componentStateId,\n      nodeId: nodeId,\n      componentId: componentId,\n      studentData: {\n        response: response,\n        componentStateIdReplyingTo: componentStateIdReplyingTo\n      }\n    };\n  };\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  beforeEach(inject((_$controller_, _$rootScope_, _$httpBackend_) => {\n    $controller = _$controller_;\n    $rootScope = _$rootScope_;\n    $httpBackend = _$httpBackend_;\n    component = {\n      id: '1sc05cn75f',\n      type: 'Graph',\n      prompt: 'Plot points on the graph.',\n      showSaveButton: false,\n      showSubmitButton: false,\n      graphType: 'line',\n      xAxis: {\n        title: {\n          text: 'Time (seconds)'\n        },\n        min: 0,\n        max: 100,\n        units: 's',\n        locked: true,\n        type: 'limits'\n      },\n      yAxis: {\n        title: {\n          text: 'Position (meters)'\n        },\n        min: 0,\n        max: 100,\n        units: 'm',\n        locked: true\n      },\n      series: [\n        {\n          id: 'series-0',\n          name: 'Prediction',\n          data: [],\n          color: 'blue',\n          canEdit: true\n        }\n      ]\n    };\n    $scope = $rootScope.$new();\n    $scope.componentContent = JSON.parse(JSON.stringify(component));\n    graphController = $controller('GraphController', { $scope: $scope });\n    graphController.nodeId = 'node1';\n  }));\n\n  it('should make sure x is within limits', () => {\n    let highX = 120;\n    highX = graphController.makeSureXIsWithinXMinMaxLimits(highX);\n    expect(highX).toEqual(100);\n    let lowX = -10;\n    lowX = graphController.makeSureXIsWithinXMinMaxLimits(lowX);\n    expect(lowX).toEqual(0);\n  });\n\n  it('should make sure y is within limits', () => {\n    let highY = 120;\n    highY = graphController.makeSureYIsWithinYMinMaxLimits(highY);\n    expect(highY).toEqual(100);\n    let lowY = -10;\n    lowY = graphController.makeSureYIsWithinYMinMaxLimits(lowY);\n    expect(lowY).toEqual(0);\n  });\n\n  it('should get the series from the trials', () => {\n    const trials = [\n      {\n        name: 'Trial 1',\n        show: true,\n        series: [{\n          name: 'Prediction',\n          data: [\n            [0, 0],\n            [10, 20],\n            [20, 40]\n          ]\n        }, {\n          name: 'Actual',\n          data: [\n            [0, 0],\n            [10, 30],\n            [20, 60]\n          ]\n        }],\n        id: 'u3ijj5vfxd'\n      },\n      {\n        name: 'Trial 2',\n        show: true,\n        series: [{\n          name: 'Prediction',\n          data: [\n            [0, 0],\n            [30, 20],\n            [40, 40]\n          ]\n        }, {\n          name: 'Actual',\n          data: [\n            [0, 0],\n            [30, 30],\n            [40, 60]\n          ]\n        }],\n        id: 'u3ijj5vfxd'\n      }\n    ];\n    const series = graphController.getSeriesFromTrials(trials);\n    expect(series.length).toEqual(4);\n  });\n\n  it('should perform rounding', () => {\n    const number = 10.234;\n    graphController.componentContent.roundValuesTo = 'integer';\n    expect(graphController.performRounding(number)).toEqual(10);\n    graphController.componentContent.roundValuesTo = 'tenth';\n    expect(graphController.performRounding(number)).toEqual(10.2);\n    graphController.componentContent.roundValuesTo = 'hundredth';\n    expect(graphController.performRounding(number)).toEqual(10.23);\n  });\n\n  it('should set the default active series', () => {\n    graphController.series = [\n      {\n        name: 'Series 1',\n        canEdit: false,\n        data: []\n      },\n      {\n        name: 'Series 2',\n        canEdit: true,\n        data: []\n      }\n    ];\n    graphController.setDefaultActiveSeries();\n    expect(graphController.activeSeries.name).toEqual('Series 2');\n  });\n\n  it('should get series by index', () => {\n    graphController.series = [\n      {\n        name: 'Series 1',\n        canEdit: false,\n        data: []\n      },\n      {\n        name: 'Series 2',\n        canEdit: true,\n        data: []\n      }\n    ];\n    expect(graphController.getSeriesByIndex(1).name).toEqual('Series 2');\n  });\n\n  it('should convert row data to series data', () => {\n    const rows = [\n      [{ text: 'Time' },{ text: 'Distance'}],\n      [{ text: '0' },{ text: '10' }],\n      [{ text: '20' },{ text: '30' }]\n    ];\n    const params = {\n      skipFirstRow: true,\n      xColumn: 0,\n      yColumn: 1\n    };\n    const data = graphController.convertRowDataToSeriesData(rows, params);\n    expect(data[0][0]).toEqual(0);\n    expect(data[0][1]).toEqual(10);\n    expect(data[1][0]).toEqual(20);\n    expect(data[1][1]).toEqual(30);\n  });\n\n  it('should get the x column value from params', () => {\n    const params1 = {\n      skipFirstRow: true,\n      xColumn: 1,\n      yColumn: 2\n    };\n    expect(graphController.getXColumnValue(params1)).toEqual(1);\n    const params2 = {};\n    expect(graphController.getXColumnValue(params2)).toEqual(0);\n  });\n\n  it('should get the y column value from params', () => {\n    const params1 = {\n      skipFirstRow: true,\n      xColumn: 1,\n      yColumn: 2\n    };\n    expect(graphController.getYColumnValue(params1)).toEqual(2);\n    const params2 = {};\n    expect(graphController.getYColumnValue(params2)).toEqual(1);\n  });\n\n  it('should check if a series is the active series', () => {\n    const series1 = {};\n    const series2 = {};\n    graphController.series = [\n      series1,\n      series2\n    ];\n    graphController.activeSeries = series2;\n    expect(graphController.isActiveSeries(series2)).toEqual(true);\n  });\n\n  it('should create a new trial', () => {\n    const series1 = {};\n    const series2 = {};\n    graphController.series = [\n      series1,\n      series2\n    ];\n    graphController.activeSeries = series1;\n    expect(graphController.trials.length).toEqual(0);\n    graphController.newTrial();\n    expect(graphController.trials.length).toEqual(1);\n  });\n\n  it('should get the trial numbers', () => {\n    graphController.trials = [];\n    const trialNumbersEmpty = graphController.getTrialNumbers();\n    expect(trialNumbersEmpty.length).toEqual(0);\n    graphController.trials = [\n      { name: 'Trial 1' },\n      { name: 'Trial 2' },\n      { name: 'Trial 3' }\n    ];\n    const trialNumbers = graphController.getTrialNumbers();\n    expect(trialNumbers[0]).toEqual(1);\n    expect(trialNumbers[1]).toEqual(2);\n    expect(trialNumbers[2]).toEqual(3);\n  });\n\n  it('should delete a trial', () => {\n    graphController.trials = [\n      { name: 'Trial 1' },\n      { name: 'Trial 2' },\n      { name: 'Trial 3' }\n    ];\n    expect(graphController.trials.length).toEqual(3);\n    graphController.deleteTrial(1);\n    expect(graphController.trials.length).toEqual(2);\n    expect(graphController.trials[0].name).toEqual('Trial 1');\n    expect(graphController.trials[1].name).toEqual('Trial 3');\n  });\n\n  it('should make the highest trial active', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa', series: [] },\n      { name: 'Trial 2', id: 'bbbbbbbbbb', series: [] },\n      { name: 'Trial 3', id: 'cccccccccc', series: [] }\n    ];\n    graphController.trialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb'];\n    expect(graphController.activeTrial).toEqual(null);\n    graphController.makeHighestTrialActive();\n    expect(graphController.activeTrial).toEqual(graphController.trials[1]);\n  });\n\n  it('should get the highest shown trial', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa' },\n      { name: 'Trial 2', id: 'bbbbbbbbbb' },\n      { name: 'Trial 3', id: 'cccccccccc' }\n    ];\n    graphController.trialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb'];\n    expect(graphController.activeTrial).toEqual(null);\n    const highestTrial = graphController.getHighestTrial();\n    expect(highestTrial).toEqual(graphController.trials[1]);\n  });\n\n  it('should set the trial ids to show', () => {\n    expect(graphController.trialIdsToShow.length).toEqual(0);\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa', show: true },\n      { name: 'Trial 2', id: 'bbbbbbbbbb', show: false },\n      { name: 'Trial 3', id: 'cccccccccc', show: true }\n    ];\n    graphController.setTrialIdsToShow();\n    expect(graphController.trialIdsToShow.length).toEqual(2);\n    expect(graphController.trialIdsToShow[0]).toEqual('aaaaaaaaaa');\n    expect(graphController.trialIdsToShow[1]).toEqual('cccccccccc');\n  });\n\n  it('should delete trials by id', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa' },\n      { name: 'Trial 2', id: 'bbbbbbbbbb' },\n      { name: 'Trial 3', id: 'cccccccccc' }\n    ];\n    expect(graphController.trials.length).toEqual(3);\n    graphController.deleteTrialsByTrialId(['aaaaaaaaaa', 'bbbbbbbbbb']);\n    expect(graphController.trials.length).toEqual(1);\n  });\n\n  it('should delete trial by id', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa' },\n      { name: 'Trial 2', id: 'bbbbbbbbbb' },\n      { name: 'Trial 3', id: 'cccccccccc' }\n    ];\n    expect(graphController.trials.length).toEqual(3);\n    graphController.deleteTrialId('bbbbbbbbbb');\n    expect(graphController.trials.length).toEqual(2);\n  });\n\n  it('should get the latest student data trial', () => {\n    const studentData = {\n      trials: [\n        { name: 'Trial 1', id: 'aaaaaaaaaa' },\n        { name: 'Trial 2', id: 'bbbbbbbbbb' }\n      ]\n    };\n    const latestTrial = graphController.getLatestStudentDataTrial(studentData);\n    expect(latestTrial.id).toEqual('bbbbbbbbbb');\n  });\n\n  it('should hide all trials', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa', show: true },\n      { name: 'Trial 2', id: 'bbbbbbbbbb', show: true }\n    ];\n    expect(graphController.trials[0].show).toEqual(true);\n    expect(graphController.trials[1].show).toEqual(true);\n    graphController.hideAllTrials();\n    expect(graphController.trials[0].show).toEqual(false);\n    expect(graphController.trials[1].show).toEqual(false);\n  });\n\n  it('should create a new trial object', () => {\n    const trial = graphController.createNewTrial('aaaaaaaaaa');\n    expect(trial.id).toEqual('aaaaaaaaaa');\n    expect(trial.name).toEqual('');\n    expect(trial.series.length).toEqual(0);\n    expect(trial.show).toEqual(true);\n  });\n\n  it('should copy a series', () => {\n    const series = {\n      name: 'Series 1',\n      data: [],\n      color: 'blue',\n      canEdit: true,\n      allowPointSelect: true\n    };\n    const newSeries = graphController.copySeries(series);\n    expect(newSeries.name).toEqual('Series 1');\n    expect(newSeries.data.length).toEqual(0);\n    expect(newSeries.color).toEqual('blue');\n    expect(newSeries.canEdit).toEqual(false);\n    expect(newSeries.allowPointSelect).toEqual(false);\n  });\n\n  it('should remove default trial if necessary', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa', series: [] }\n    ];\n    expect(graphController.trials.length).toEqual(1);\n    const latestStudentDataTrialId = 2;\n    graphController.removeDefaultTrialIfNecessary(latestStudentDataTrialId);\n    expect(graphController.trials.length).toEqual(0);\n  });\n\n  it('should check if a trial has an empty series', () => {\n    const trial1 = { series: [] };\n    expect(graphController.isTrialHasEmptySeries(trial1)).toEqual(true);\n    const trial2 = { series: [ { id: 'series-0' }, { id: 'series-1' }] };\n    expect(graphController.isTrialHasEmptySeries(trial2)).toEqual(false);\n  });\n\n  it('should check if a series is empty', () => {\n    const series1 = [ { data: [] } ];\n    expect(graphController.isSeriesEmpty(series1)).toEqual(true);\n    const series2 = [\n      { id: 'series-0', data: [[0, 10]] }\n    ];\n    expect(graphController.isSeriesEmpty(series2)).toEqual(false);\n  });\n\n  it('should create new trial if necessary', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa', show: true }\n    ];\n    const trialId = 2;\n    graphController.createNewTrialIfNecessary(trialId);\n    expect(graphController.trials.length).toEqual(2);\n  });\n\n  it('should not create new trial when not necessary', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa', show: true }\n    ];\n    const trialId = 'aaaaaaaaaa';\n    graphController.createNewTrialIfNecessary(trialId);\n    expect(graphController.trials.length).toEqual(1);\n  });\n\n  it('should copy series into trial', () => {\n    const oldTrial = {\n      series: [ { id: 'series-0' } ]\n    };\n    const newTrial = {\n      series: []\n    };\n    const studentData = {};\n    const params = {};\n    expect(newTrial.series.length).toEqual(0);\n    graphController.copySeriesIntoTrial(oldTrial, newTrial, studentData, params);\n    expect(newTrial.series.length).toEqual(1);\n  });\n\n  it('should copy name into trial', () => {\n    const oldTrial = {\n      name: 'Trial 1'\n    };\n    const newTrial = {\n      name: 'Trial 2'\n    };\n    expect(newTrial.name).toEqual('Trial 2');\n    graphController.copyTrialNameIntoTrial(oldTrial, newTrial);\n    expect(newTrial.name).toEqual('Trial 1');\n  });\n\n  it('should get the trial by id', () => {\n    const trial1 = { name: 'Trial 1', id: 'aaaaaaaaaa' };\n    const trial2 = { name: 'Trial 2', id: 'bbbbbbbbbb' };\n    const trial3 = { name: 'Trial 3', id: 'cccccccccc' };\n    graphController.trials = [\n      trial1,\n      trial2,\n      trial3\n    ];\n    expect(graphController.getTrialById('aaaaaaaaaa')).toEqual(trial1);\n    expect(graphController.getTrialById('bbbbbbbbbb')).toEqual(trial2);\n    expect(graphController.getTrialById('cccccccccc')).toEqual(trial3);\n  });\n\n  it('should check if there is an editable series', () => {\n    graphController.series = [\n      { id: 'series-0', canEdit: false }\n    ];\n    expect(graphController.hasEditableSeries()).toEqual(false);\n    graphController.series = [\n      { id: 'series-0', canEdit: true }\n    ];\n    expect(graphController.hasEditableSeries()).toEqual(true);\n    const trial0 = {\n      id: 'trial0',\n      series: [\n        {\n          id: 'series0',\n          canEdit: false\n        },\n        {\n          id: 'series1',\n          canEdit: false\n        }\n      ]\n    };\n    expect(graphController.hasEditableSeries(trial0.series)).toEqual(false);\n    const trial1 = {\n      id: 'trial1',\n      series: [\n        {\n          id: 'series0',\n          canEdit: true\n        },\n        {\n          id: 'series1',\n          canEdit: false\n        }\n      ]\n    };\n    expect(graphController.hasEditableSeries(trial1.series)).toEqual(true);\n  });\n\n  it('should get min max values', () => {\n    const series = [\n      { id: 'series-0', data: [[0, 20], [10, 200]] }\n    ];\n    const minMaxValues = graphController.getMinMaxValues(series);\n    expect(minMaxValues.xMin).toEqual(0);\n    expect(minMaxValues.xMax).toEqual(10);\n    expect(minMaxValues.yMin).toEqual(0);\n    expect(minMaxValues.yMax).toEqual(200);\n  });\n\n  it('should update min max axis values', () => {\n    const series = [\n      { id: 'series-0', data: [[-10, -20], [1000, 2000]] }\n    ];\n    const xAxis = { min: 0, max: 100 };\n    const yAxis = { min: 0, max: 100 };\n    graphController.updateMinMaxAxisValues(series, xAxis, yAxis);\n    expect(xAxis.min).toEqual(null);\n    expect(xAxis.max).toEqual(null);\n    expect(yAxis.min).toEqual(null);\n    expect(yAxis.max).toEqual(null);\n  });\n\n  it('should clear series ids', () => {\n    const series = [\n      { id: 'series-0' },\n      { id: 'series-1' }\n    ];\n    graphController.clearSeriesIds(series);\n    expect(series[0].id).toEqual(null);\n    expect(series[1].id).toEqual(null);\n  });\n\n  it('should read csv into active series', () => {\n    const csvString = `0,100\n    10, 200`;\n    graphController.activeSeries = {};\n    graphController.readCSVIntoActiveSeries(csvString);\n    expect(graphController.activeSeries.data[0][0]).toEqual(0);\n    expect(graphController.activeSeries.data[0][1]).toEqual(100);\n    expect(graphController.activeSeries.data[1][0]).toEqual(10);\n    expect(graphController.activeSeries.data[1][1]).toEqual(200);\n  });\n\n  it('should convert series data points from limits to categories', () => {\n    const series = {\n      data: [[0, 100],[10, 200]]\n    };\n    const xAxisType = 'categories';\n    graphController.convertSeriesDataPoints(series, xAxisType);\n    expect(series.data[0]).toEqual(100);\n    expect(series.data[1]).toEqual(200);\n  });\n\n  it('should convert series data points from categories to limits', () => {\n    const series = {\n      data: [100, 200]\n    };\n    const xAxisType = 'limits';\n    graphController.convertSeriesDataPoints(series, xAxisType);\n    expect(series.data[0][1]).toEqual(100);\n    expect(series.data[1][1]).toEqual(200);\n  });\n\n  it('should set vertical plot line', () => {\n    const x = 10;\n    graphController.setVerticalPlotLine(x);\n    expect(graphController.plotLines.length).toEqual(1);\n    expect(graphController.plotLines[0].value).toEqual(10);\n  });\n\n  it('should merge component state', () => {\n    const baseComponentState = {\n      studentData: {\n        trials: [\n          { id: 'aaaaaaaaaa', name: 'Trial 1', series: [] }\n        ]\n      }\n    };\n    const connectedComponentState = {\n      studentData: {\n        trials: [\n          { id: 'bbbbbbbbbb', name: 'Trial 2', series: [] }\n        ]\n      }\n    };\n    const mergeFields = [\n      {\n        name: 'trials',\n        when: 'always',\n        action: 'write'\n      }\n    ];\n    const firstTime = false;\n    expect(baseComponentState.studentData.trials[0].name).toEqual('Trial 1');\n    graphController.mergeComponentState(\n      baseComponentState, connectedComponentState, mergeFields, firstTime);\n    expect(baseComponentState.studentData.trials[0].name).toEqual('Trial 2');\n  });\n\n  it('should convert selected cells to trial ids', () => {\n    const selectedCells = [\n      {\n        airTemp: 'Warm',\n        bevTemp: 'Hot',\n        material: 'Aluminum',\n        dateAdded: 1556233173611\n      },\n      {\n        airTemp: 'Warm',\n        bevTemp: 'Cold',\n        material: 'Aluminum',\n        dateAdded: 1556233245396\n      }\n    ];\n    const selectedTrialIds = graphController.convertSelectedCellsToTrialIds(selectedCells);\n    expect(selectedTrialIds.length).toEqual(2);\n    expect(selectedTrialIds[0]).toEqual('Aluminum-HotLiquid');\n    expect(selectedTrialIds[1]).toEqual('Aluminum-ColdLiquid');\n  });\n\n  it('should convert null selected cells to empty array of trial ids', () => {\n    const selectedCells = null;\n    const selectedTrialIds = graphController.convertSelectedCellsToTrialIds(selectedCells);\n    expect(selectedTrialIds.length).toEqual(0);\n  });\n\n  it('should read the connected component field', () => {\n    const studentData = {\n      selectedCells: [\n        {\n          airTemp: 'Warm',\n          bevTemp: 'Hot',\n          material: 'Aluminum',\n          dateAdded: 1556233173611\n        },\n        {\n          airTemp: 'Warm',\n          bevTemp: 'Cold',\n          material: 'Aluminum',\n          dateAdded: 1556233245396\n        }\n      ]\n    };\n    const params = {};\n    const name = 'selectedCells';\n    graphController.trials = [\n      { id: 'Aluminum-HotLiquid' },\n      { id: 'Aluminum-ColdLiquid' },\n      { id: 'Wood-HotLiquid' },\n      { id: 'Wood-ColdLiquid' }\n    ];\n    graphController.readConnectedComponentFieldFromStudentData(studentData, params, name);\n    expect(graphController.trials[0].show).toEqual(true);\n    expect(graphController.trials[1].show).toEqual(true);\n    expect(graphController.trials[2].show).toEqual(false);\n    expect(graphController.trials[3].show).toEqual(false);\n  });\n\n  it('should click undo', () => {\n    graphController.trials = [\n      { id: 'aaaaaaaaaa' }\n    ];\n    const componentState = {\n      studentData: {\n        trials: [\n          { id: 'aaaaaaaaaa' },\n          { id: 'bbbbbbbbbb' }\n        ]\n      }\n    };\n    graphController.undoStack = [componentState];\n    graphController.undoClicked();\n    expect(graphController.undoStack.length).toEqual(0);\n    expect(graphController.previousComponentState).toEqual(componentState);\n    expect(graphController.trials[0].id).toEqual('aaaaaaaaaa');\n    expect(graphController.trials[1].id).toEqual('bbbbbbbbbb');\n  });\n\n  it('should get the category by index', () => {\n    graphController.componentContent = {\n      xAxis: {\n        categories: [\n          'Computers',\n          'Phones',\n          'Pizzas'\n        ]\n      }\n    };\n    expect(graphController.getCategoryByIndex(0)).toEqual('Computers');\n    expect(graphController.getCategoryByIndex(1)).toEqual('Phones');\n    expect(graphController.getCategoryByIndex(2)).toEqual('Pizzas');\n  });\n\n  it('should get the x value from data point', () => {\n    const dataPointObject = { x: 10, y: 20 };\n    const dataPointArray = [100, 200];\n    expect(graphController.getXValueFromDataPoint(dataPointObject)).toEqual(10);\n    expect(graphController.getXValueFromDataPoint(dataPointArray)).toEqual(100);\n  });\n\n  it('should get the y value from data point', () => {\n    const dataPointObject = { x: 10, y: 20 };\n    const dataPointArray = [100, 200];\n    expect(graphController.getYValueFromDataPoint(dataPointObject)).toEqual(20);\n    expect(graphController.getYValueFromDataPoint(dataPointArray)).toEqual(200);\n  });\n\n  it('should get the latest mouse over point x', () => {\n    graphController.mouseOverPoints = [{ x: 10, y: 20 }, { x: 11, y: 22 }];\n    expect(graphController.getLatestMouseOverPointX()).toEqual(11);\n    graphController.mouseOverPoints = [[100, 200], [111, 222]];\n    expect(graphController.getLatestMouseOverPointX()).toEqual(111);\n  });\n\n  it('should get the latest mouse over point y', () => {\n    graphController.mouseOverPoints = [{ x: 10, y: 20 }, { x: 11, y: 22 }];\n    expect(graphController.getLatestMouseOverPointY()).toEqual(22);\n    graphController.mouseOverPoints = [[100, 200], [111, 222]];\n    expect(graphController.getLatestMouseOverPointY()).toEqual(222);\n  });\n\n  it('should add point to series', () => {\n    const series = {\n      data: [[10, 20], [100, 200]]\n    };\n    expect(series.data.length).toEqual(2);\n    graphController.addPointToSeries(series, 1000, 2000);\n    expect(series.data.length).toEqual(3);\n    expect(series.data[2][0]).toEqual(1000);\n    expect(series.data[2][1]).toEqual(2000);\n  });\n\n  it('should remove point from series', () => {\n    const series = {\n      data: [[10, 20], [100, 200]]\n    };\n    expect(series.data.length).toEqual(2);\n    graphController.removePointFromSeries(series, 10);\n    expect(series.data.length).toEqual(1);\n    expect(series.data[0][0]).toEqual(100);\n    expect(series.data[0][1]).toEqual(200);\n  });\n\n  it('should get the trial index', () => {\n    const trial0 = {};\n    const trial1 = {};\n    const trial2 = {};\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    expect(graphController.getTrialIndex(trial0)).toEqual(0);\n    expect(graphController.getTrialIndex(trial1)).toEqual(1);\n    expect(graphController.getTrialIndex(trial2)).toEqual(2);\n  });\n\n  it('should create the chart config', () => {\n    const trial0 = {};\n    const trial1 = {};\n    const trial2 = {};\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    const deferred = {};\n    const title = 'My Graph';\n    const xAxis = {\n      min: 0,\n      max: 100\n    };\n    const yAxis = {\n      min: 0,\n      max: 50\n    };\n    const series = [[10, 20], [100, 200]];\n    const zoomType = null;\n    const chartConfig = graphController.createChartConfig(deferred, title, xAxis, yAxis, series, zoomType);\n    expect(chartConfig.title.text).toEqual('My Graph');\n    expect(chartConfig.xAxis.min).toEqual(0);\n    expect(chartConfig.xAxis.max).toEqual(100);\n    expect(chartConfig.yAxis.min).toEqual(0);\n    expect(chartConfig.yAxis.max).toEqual(50);\n    expect(chartConfig.series).toEqual(series);\n    expect(chartConfig.options.chart.zoomType).toEqual(null);\n  });\n\n  it('should check if a series is editable', () => {\n    const multipleSeries = [\n      { id: 'series0', canEdit: true},\n      { id: 'series1', canEdit: false},\n      { id: 'series2', canEdit: true}\n    ];\n    expect(graphController.isSeriesEditable(multipleSeries, 0)).toEqual(true);\n    expect(graphController.isSeriesEditable(multipleSeries, 1)).toEqual(false);\n    expect(graphController.isSeriesEditable(multipleSeries, 2)).toEqual(true);\n  });\n\n  it('should get the latest editable series index', () => {\n    const multipleSeries0 = [\n      { id: 'series0', canEdit: true},\n      { id: 'series1', canEdit: false},\n      { id: 'series2', canEdit: false}\n    ];\n    expect(graphController.getLatestEditableSeriesIndex(multipleSeries0)).toEqual(0);\n    const multipleSeries1 = [\n      { id: 'series0', canEdit: true},\n      { id: 'series1', canEdit: true},\n      { id: 'series2', canEdit: false}\n    ];\n    expect(graphController.getLatestEditableSeriesIndex(multipleSeries1)).toEqual(1);\n    const multipleSeries2 = [\n      { id: 'series0', canEdit: true},\n      { id: 'series1', canEdit: false},\n      { id: 'series2', canEdit: true}\n    ];\n    expect(graphController.getLatestEditableSeriesIndex(multipleSeries2)).toEqual(2);\n    const multipleSeries3 = [\n      { id: 'series0', canEdit: false},\n      { id: 'series1', canEdit: false},\n      { id: 'series2', canEdit: false}\n    ];\n    expect(graphController.getLatestEditableSeriesIndex(multipleSeries3)).toEqual(null);\n  });\n\n  it('should handle trial ids to show changed', () => {\n    const trial0 = {\n      id: 'aaaaaaaaaa',\n      show: true,\n      series: [\n        {\n          id: '1111111111',\n          canEdit: true\n        }\n      ]\n    };\n    const trial1 = {\n      id: 'bbbbbbbbbb',\n      show: true,\n      series: [\n        {\n          id: '2222222222',\n          canEdit: true\n        }\n      ]\n    };\n    const trial2 = {\n      id: 'cccccccccc',\n      show: true,\n      series: [\n        {\n          id: '3333333333',\n          canEdit: true\n        }\n      ]\n    };\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    graphController.activeTrial = trial1;\n    graphController.activeSeries = trial1.series[0];\n    graphController.previousTrialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb'];\n    graphController.trialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb', 'cccccccccc'];\n    const studentDataChangedSpy = spyOn(graphController, 'studentDataChanged').and.callFake(() => {});\n    graphController.trialIdsToShowChanged();\n    expect(graphController.activeTrial).toEqual(trial2);\n    expect(graphController.activeSeries).toEqual(trial2.series[0]);\n    expect(studentDataChangedSpy).toHaveBeenCalled();\n  });\n\n  it('should handle trial ids to show changed when the latest trial is not editable', () => {\n    const trial0 = {\n      id: 'aaaaaaaaaa',\n      show: true,\n      series: [\n        {\n          id: '1111111111',\n          canEdit: true\n        }\n      ]\n    };\n    const trial1 = {\n      id: 'bbbbbbbbbb',\n      show: true,\n      series: [\n        {\n          id: '2222222222',\n          canEdit: true\n        }\n      ]\n    };\n    const trial2 = {\n      id: 'cccccccccc',\n      show: true,\n      series: [\n        {\n          id: '3333333333',\n          canEdit: false\n        }\n      ]\n    };\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    graphController.activeTrial = trial1;\n    graphController.activeSeries = trial1.series[0];\n    const trialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb', 'cccccccccc'];\n    graphController.trialIdsToShow = trialIdsToShow;\n    graphController.previousTrialIdsToShow = trialIdsToShow;\n    graphController.trialIdsToShowChanged();\n    expect(graphController.activeTrial).toEqual(trial1);\n    expect(graphController.activeSeries).toEqual(trial1.series[0]);\n  });\n\n  it('should show and hide trials', () => {\n    const trial0 = {\n      id: 'aaaaaaaaaa',\n      show: true,\n      series: [\n        {\n          id: '1111111111',\n          canEdit: true\n        }\n      ]\n    };\n    const trial1 = {\n      id: 'bbbbbbbbbb',\n      show: true,\n      series: [\n        {\n          id: '2222222222',\n          canEdit: true\n        }\n      ]\n    };\n    const trial2 = {\n      id: 'cccccccccc',\n      show: true,\n      series: [\n        {\n          id: '3333333333',\n          canEdit: false\n        }\n      ]\n    };\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    graphController.series = trial1.series;\n    graphController.activeTrial = trial1;\n    graphController.activeSeries = trial1.series[0];\n    const trialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb'];\n    graphController.showOrHideTrials(trialIdsToShow);\n    expect(trial0.show).toEqual(true);\n    expect(trial1.show).toEqual(true);\n    expect(trial2.show).toEqual(false);\n  });\n\n  it('should show trials and hide the currently active trial', () => {\n    const trial0 = {\n      id: 'aaaaaaaaaa',\n      show: true,\n      series: [\n        {\n          id: '1111111111',\n          canEdit: true\n        }\n      ]\n    };\n    const trial1 = {\n      id: 'bbbbbbbbbb',\n      show: true,\n      series: [\n        {\n          id: '2222222222',\n          canEdit: true\n        }\n      ]\n    };\n    const trial2 = {\n      id: 'cccccccccc',\n      show: true,\n      series: [\n        {\n          id: '3333333333',\n          canEdit: false\n        }\n      ]\n    };\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    graphController.series = trial1.series;\n    graphController.activeTrial = trial1;\n    graphController.activeSeries = trial1.series[0];\n    const trialIdsToShow = ['aaaaaaaaaa', 'cccccccccc'];\n    graphController.showOrHideTrials(trialIdsToShow);\n    expect(trial0.show).toEqual(true);\n    expect(trial1.show).toEqual(false);\n    expect(trial2.show).toEqual(true);\n    expect(graphController.series).toEqual([]);\n    expect(graphController.activeTrial).toEqual(null);\n    expect(graphController.activeSeries).toEqual(null);\n  });\n\n  it('should set active trial and series by trial ids to show', () => {\n    const trial0 = {\n      id: 'aaaaaaaaaa',\n      show: true,\n      series: [\n        {\n          id: '1111111111',\n          canEdit: true\n        }\n      ]\n    };\n    const trial1 = {\n      id: 'bbbbbbbbbb',\n      show: true,\n      series: [\n        {\n          id: '2222222222',\n          canEdit: true\n        }\n      ]\n    };\n    const trial2 = {\n      id: 'cccccccccc',\n      show: true,\n      series: [\n        {\n          id: '3333333333',\n          canEdit: false\n        }\n      ]\n    };\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    graphController.series = trial2.series;\n    graphController.activeTrial = trial2;\n    graphController.activeSeries = trial2.series[0];\n    const trialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb'];\n    graphController.setActiveTrialAndSeriesByTrialIdsToShow(trialIdsToShow);\n    expect(graphController.series).toEqual(trial1.series);\n    expect(graphController.activeTrial).toEqual(trial1);\n    expect(graphController.activeSeries).toEqual(trial1.series[0]);\n  });\n\n  it('should not set the active trial and series if the trial can not be edited', () => {\n    const trial0 = {\n      id: 'aaaaaaaaaa',\n      show: true,\n      series: [\n        {\n          id: '1111111111',\n          canEdit: true\n        }\n      ]\n    };\n    const trial1 = {\n      id: 'bbbbbbbbbb',\n      show: true,\n      series: [\n        {\n          id: '2222222222',\n          canEdit: true\n        }\n      ]\n    };\n    const trial2 = {\n      id: 'cccccccccc',\n      show: true,\n      series: [\n        {\n          id: '3333333333',\n          canEdit: false\n        }\n      ]\n    };\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    graphController.series = trial1.series;\n    graphController.activeTrial = trial1;\n    graphController.activeSeries = trial1.series[0];\n    const trialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb', 'cccccccccc'];\n    graphController.setActiveTrialAndSeriesByTrialIdsToShow(trialIdsToShow);\n    expect(graphController.series).toEqual(trial1.series);\n    expect(graphController.activeTrial).toEqual(trial1);\n    expect(graphController.activeSeries).toEqual(trial1.series[0]);\n  });\n\n});\n"]}