{"version":3,"sources":["componentController.es6"],"names":["ComponentController","$filter","$mdDialog","$rootScope","$scope","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","$translate","nodeId","componentContent","componentId","id","componentType","type","idToOrder","mode","authoringComponentContent","isShowPreviousWork","showAdvancedAuthoring","showJSONAuthoring","isDisabled","isDirty","parentStudentWorkIds","attachments","isSubmitDirty","isSubmit","saveMessage","text","time","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","submitCounter","isSnipButtonVisible","workgroupId","teacherWorkgroupId","showAddToNotebookButton","isStudentMode","showSaveButton","showSubmitButton","isRunActive","isGradingMode","isGradingRevisionMode","isOnlyShowWorkMode","latestAnnotations","getLatestComponentAnnotations","isAuthoringMode","authoringConstructor","registerListeners","registerComponentWithParentNode","$on","event","args","annotation","isEventTargetThisComponent","handleNodeSubmit","cleanupBeforeExiting","registerStudentWorkSavedToServerListener","scope","childControllerName","getComponentState","deferred","$q","defer","childController","hasDirtyWorkToSendToParent","action","getDirtyWorkToSendToParentAction","createComponentState","then","componentState","resolve","promise","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","registerAuthoringListeners","updateAdvancedAuthoringView","$watch","newValue","oldValue","handleAuthoringComponentContentChanged","hideJSONValidMessage","assetSelected","injectAssetPaths","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","summernoteId","target","$","summernote","fullAssetPath","videoElement","document","createElement","controls","innerHTML","assetItem","getSummernoteId","restoreSummernoteCursorPosition","getFullAssetPath","isImage","insertImageIntoSummernote","isVideo","insertVideoIntoSummernote","hide","$parent","nodeController","registerComponentController","$broadcast","handleStudentWorkSavedToServer","studentWork","isForThisComponent","setIsDirty","emitComponentDirty","getIsDirty","clientSaveTime","convertToClientTimestamp","serverSaveTime","setSubmittedMessage","lockIfNecessary","setIsSubmitDirty","$emit","isAutoSave","setAutoSavedMessage","setSavedMessage","handleStudentWorkSavedToServerAdditionalProcessing","prompt","submit","submitTriggeredBy","getIsSubmitDirty","isPerformSubmit","hasMaxSubmitCount","numberOfSubmitsLeft","getNumberOfSubmitsLeft","hasSubmitMessage","confirmSubmit","performSubmit","setIsSubmit","incrementSubmitCounter","canSubmit","disableSubmitButton","emitComponentSubmitTriggered","isLockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isWorkSubmitted","lockAfterSubmit","isCompleted","setIsDirtyAndBroadcast","setIsSubmitDirtyAndBroadcast","clearSaveText","createComponentStateAndBroadcast","emitComponentSubmitDirty","emitComponentStudentDataChanged","emitComponentCompleted","latestComponentState","getLatestComponentStateByNodeIdAndComponentId","setSaveText","message","getNodeIds","getNodePositionAndTitleByNodeId","getComponentsByNodeId","isApplicationNode","connectedComponents","connectedComponent","push","makeCopyOfJSONObject","length","setStudentWork","createMergedComponentState","handleConnectedComponentsPostProcess","studentDataChanged","connectedComponentsAndTheirComponentStates","connectedComponentsAndComponentState","isSpaceExists","insertMode","requester","visibleSpace","studentWorkId","getStudentWorkById","setParentStudentWorkIdToCurrentStudentWork","isNotebookEnabled","isStudentNoteClippingEnabled","show","setShowSubmitButtonValue","authoringViewComponentChanged","createConnectedComponent","addConnectedComponent","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","components","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","authoringAutomaticallySetConnectedComponentTypeIfPossible","authoringAutomaticallySetConnectedComponentFieldsIfPossible","index","answer","confirm","splice","connectedComponentType","getComponentByNodeIdAndComponentId","allowedConnectedComponentTypes","a","allowedConnectedComponentType","tags","tag","indexOfTagToDelete","html","removeAbsoluteAssetPaths","insertWISELinks","nodeAuthoringController","authoringViewNodeChanged","authoringComponentContentJSONString","angular","toJson","editedComponentContent","fromJson","replaceComponent","e","showSaveErrorAdvancedAuthoring","isJSONValid","saveJSONAuthoringViewChanges","toggleJSONAuthoringView","isRollback","isJSONStringChanged","rollbackToRecentValidJSON","rememberRecentValidJSON","showJSONValidMessage","showJSONInvalidMessage","authoringValidComponentContentJSONString","object","hasSubmitsLeft","getMaxSubmitCount","maxSubmitCount","attachment","indexOf","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","maxScore","data","createAutoAnnotation","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","createAutoScoreAnnotation","createAutoCommentAnnotation","score","comment","$inject"],"mappings":"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","sourcesContent":["class ComponentController {\n  constructor(\n      $filter,\n      $mdDialog,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    this.$filter = $filter;\n    this.$mdDialog = $mdDialog;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.NotebookService = NotebookService;\n    this.ProjectService = ProjectService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n\n    this.nodeId = this.$scope.nodeId;\n    this.componentContent = this.$scope.componentContent;\n    this.componentId = this.componentContent.id;\n    this.componentType = this.componentContent.type;\n    this.idToOrder = this.ProjectService.idToOrder;\n    this.mode = this.$scope.mode;\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n    this.isShowPreviousWork = false;\n    this.showAdvancedAuthoring = false;\n    this.showJSONAuthoring = false;\n    this.isDisabled = false;\n    this.isDirty = false;\n    this.parentStudentWorkIds = null;\n    this.attachments = [];\n\n    this.isSubmitDirty = false;\n\n    this.isSubmit = false;\n\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n    this.isPromptVisible = true;\n    this.isSaveButtonVisible = false;\n    this.isSubmitButtonVisible = false;\n    this.isSubmitButtonDisabled = false;\n    this.submitCounter = 0;\n\n    this.isSnipButtonVisible = true;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n    this.showAddToNotebookButton =\n      this.componentContent.showAddToNotebookButton == null ? true : this.componentContent.showAddToNotebookButton;\n\n    if (this.isStudentMode()) {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      if (!this.ConfigService.isRunActive()) {\n        this.isDisabled = true;\n      }\n    } else if (this.isGradingMode()) {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.isGradingRevisionMode()) {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.isOnlyShowWorkMode()) {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    }\n\n    if (this.isStudentMode() || this.isGradingMode() || this.isGradingRevisionMode()) {\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    }\n\n    if (this.isGradingMode() || this.isGradingRevisionMode() || this.isOnlyShowWorkMode()) {\n      this.showAddToNotebookButton = false;\n    } else if (this.isAuthoringMode()) {\n      if (this.authoringComponentContent.showAddToNotebookButton == null) {\n        this.authoringComponentContent.showAddToNotebookButton = true;\n      }\n      this.authoringConstructor();\n    }\n\n    this.registerListeners();\n    this.registerComponentWithParentNode();\n  }\n\n  isStudentMode() {\n    return this.mode === 'student';\n  }\n\n  isAuthoringMode() {\n    return this.mode === 'authoring';\n  }\n\n  isGradingMode() {\n    return this.mode === 'grading';\n  }\n\n  isGradingRevisionMode() {\n    return this.mode === 'gradingRevision';\n  }\n\n  isOnlyShowWorkMode() {\n    return this.mode === 'onlyShowWork';\n  }\n\n  registerListeners() {\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n      const annotation = args.annotation;\n      if (this.isEventTargetThisComponent(annotation)) {\n        this.latestAnnotations = this.AnnotationService\n          .getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      }\n    });\n\n    this.$scope.$on('nodeSubmitClicked', (event, args) => {\n      if (this.nodeId === args.nodeId) {\n        this.handleNodeSubmit();\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', (event, args) => {\n      this.cleanupBeforeExiting(event, args);\n    });\n\n    this.registerStudentWorkSavedToServerListener();\n  }\n\n  initializeScopeGetComponentState(scope, childControllerName) {\n    scope.getComponentState = (isSubmit) => {\n      const deferred = this.$q.defer();\n      const childController = scope[childControllerName];\n      if (this.hasDirtyWorkToSendToParent(childController, isSubmit)) {\n        const action = this.getDirtyWorkToSendToParentAction(childController, isSubmit);\n        childController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        deferred.resolve();\n      }\n      return deferred.promise;\n    };\n  }\n\n  hasDirtyWorkToSendToParent(childController, isSubmit) {\n    return (isSubmit && childController.isSubmitDirty) || childController.isDirty;\n  }\n\n  getDirtyWorkToSendToParentAction(childController, isSubmit) {\n    if (isSubmit && childController.isSubmitDirty) {\n      return 'submit';\n    } else if (childController.isDirty) {\n      return 'save';\n    }\n    return 'change';\n  }\n\n  authoringConstructor() {\n    this.isPromptVisible = true;\n    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n    this.summernoteRubricHTML = this.componentContent.rubric;\n\n    const insertAssetString = this.$translate('INSERT_ASSET');\n    const InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: InsertAssetButton\n      }\n    };\n\n    this.registerAuthoringListeners();\n    this.updateAdvancedAuthoringView();\n  }\n\n  registerAuthoringListeners() {\n    this.$scope.$watch(\n        () => {\n          return this.authoringComponentContent\n        },\n        (newValue, oldValue) => {\n          this.handleAuthoringComponentContentChanged(newValue, oldValue);\n        },\n        true\n    );\n\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (this.componentId === args.componentId) {\n        this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        this.UtilService.hideJSONValidMessage();\n      }\n    });\n\n    this.$scope.$on('assetSelected', (event, args) => {\n      this.assetSelected(event, args);\n    });\n  }\n\n  handleAuthoringComponentContentChanged(newValue, oldValue) {\n    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n    this.latestAnnotations = null;\n    this.isDirty = false;\n    this.isSubmitDirty = false;\n    this.submitCounter = 0;\n  }\n\n  getFullAssetPath(fileName) {\n    const assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n    return assetsDirectoryPath + '/' + fileName;\n  }\n\n  getSummernoteId(args) {\n    let summernoteId = '';\n    if (args.target == 'prompt') {\n      summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n    } else if (args.target == 'rubric') {\n      summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n    }\n    return summernoteId;\n  }\n\n  restoreSummernoteCursorPosition(summernoteId) {\n    $('#' + summernoteId).summernote('editor.restoreRange');\n    $('#' + summernoteId).summernote('editor.focus');\n  }\n\n  insertImageIntoSummernote(summernoteId, fullAssetPath, fileName) {\n    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n  }\n\n  insertVideoIntoSummernote(summernoteId, fullAssetPath) {\n    var videoElement = document.createElement('video');\n    videoElement.controls = 'true';\n    videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n    $('#' + summernoteId).summernote('insertNode', videoElement);\n  }\n\n  assetSelected(event, args) {\n    if (this.isEventTargetThisComponent(args)) {\n      if (args.target === 'rubric') {\n        const fileName = args.assetItem.fileName;\n        const summernoteId = this.getSummernoteId(args);\n        this.restoreSummernoteCursorPosition(summernoteId);\n        const fullAssetPath = this.getFullAssetPath(fileName);\n        if (this.UtilService.isImage(fileName)) {\n          this.insertImageIntoSummernote(summernoteId, fullAssetPath, fileName);\n        } else if (this.UtilService.isVideo(fileName)) {\n          this.insertVideoIntoSummernote(summernoteId, fullAssetPath);\n        }\n      }\n    }\n    this.$mdDialog.hide();\n  }\n\n  registerComponentWithParentNode() {\n    if (this.$scope.$parent.nodeController != null) {\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n  }\n\n  cleanupBeforeExiting() {\n\n  }\n\n  broadcastDoneRenderingComponent() {\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  registerStudentWorkSavedToServerListener() {\n    this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n      this.handleStudentWorkSavedToServer(event, args);\n    });\n  }\n\n  handleStudentWorkSavedToServer(event, args) {\n    const componentState = args.studentWork;\n    if (this.isForThisComponent(componentState)) {\n      this.setIsDirty(false);\n      this.emitComponentDirty(this.getIsDirty());\n      const clientSaveTime = this.ConfigService.convertToClientTimestamp(componentState.serverSaveTime);\n      if (componentState.isSubmit) {\n        this.setSubmittedMessage(clientSaveTime);\n        this.lockIfNecessary();\n        this.setIsSubmitDirty(false);\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: this.isSubmitDirty});\n      } else if (componentState.isAutoSave) {\n        this.setAutoSavedMessage(clientSaveTime);\n      } else {\n        this.setSavedMessage(clientSaveTime);\n      }\n    }\n    this.handleStudentWorkSavedToServerAdditionalProcessing(event, args);\n  }\n\n  handleStudentWorkSavedToServerAdditionalProcessing(event, args) {\n\n  }\n\n  handleNodeSubmit() {\n    this.isSubmit = true;\n  }\n\n  getPrompt() {\n    return this.componentContent.prompt;\n  }\n\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    // tell the parent node to save\n    this.$scope.$emit('componentSaveTriggered',\n        {nodeId: this.nodeId, componentId: this.componentId});\n  }\n\n  submitButtonClicked() {\n    this.submit('componentSubmitButton');\n  }\n\n  /**\n   * A submit was triggered by the component submit button or node submit button.\n   * @param {string} submitTriggeredBy What triggered the submit.\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n    if (this.getIsSubmitDirty()) {\n      let isPerformSubmit = true;\n\n      if (this.hasMaxSubmitCount()) {\n        const numberOfSubmitsLeft = this.getNumberOfSubmitsLeft();\n\n        if (this.hasSubmitMessage()) {\n          isPerformSubmit = this.confirmSubmit(numberOfSubmitsLeft);\n        } else {\n          if (numberOfSubmitsLeft <= 0) {\n            isPerformSubmit = false;\n          }\n        }\n      }\n\n      if (isPerformSubmit) {\n        this.performSubmit(submitTriggeredBy);\n      } else {\n        this.setIsSubmit(false);\n      }\n    }\n  }\n\n  disableSubmitButton() {\n    this.isSubmitButtonDisabled = true;\n  }\n\n  performSubmit(submitTriggeredBy) {\n    this.setIsSubmit(true);\n    this.incrementSubmitCounter();\n\n    if (!this.canSubmit()) {\n      this.disableSubmitButton();\n    }\n\n    if (this.isAuthoringMode()) {\n      /*\n       * We are in authoring mode so we will set values appropriately\n       * here because the 'componentSubmitTriggered' event won't\n       * work in authoring mode.\n       */\n      this.setIsDirty(false);\n      this.setIsSubmitDirty(false);\n      this.createComponentState('submit');\n    } else {\n      if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n        this.emitComponentSubmitTriggered();\n      }\n    }\n  }\n\n  hasSubmitMessage() {\n    return false;\n  }\n\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  emitComponentSubmitTriggered() {\n    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  }\n\n  disableComponentIfNecessary() {\n    if (this.isLockAfterSubmit()) {\n      const componentStates = this.StudentDataService\n          .getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n      if (this.NodeService.isWorkSubmitted(componentStates)) {\n        this.isDisabled = true;\n      }\n    }\n  }\n\n  lockIfNecessary() {\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  }\n\n  isLockAfterSubmit() {\n    return this.componentContent.lockAfterSubmit;\n  }\n\n  studentDataChanged(isCompleted = false) {\n    this.setIsDirtyAndBroadcast();\n    this.setIsSubmitDirtyAndBroadcast();\n    this.clearSaveText();\n    const action = 'change';\n    this.createComponentStateAndBroadcast(action);\n  }\n\n  setIsDirtyAndBroadcast() {\n    this.setIsDirty(true);\n    this.emitComponentDirty(true);\n  }\n\n  setIsSubmitDirtyAndBroadcast() {\n    this.setIsSubmitDirty(true);\n    this.emitComponentSubmitDirty(true);\n  }\n\n  /*\n   * the student work in this component has changed so we will tell\n   * the parent node that the student data will need to be saved.\n   * this will also notify connected parts that this component's student\n   * data has changed.\n   */\n  createComponentStateAndBroadcast(action) {\n    this.createComponentState(action).then((componentState) => {\n      this.emitComponentStudentDataChanged(componentState);\n      if (componentState.isCompleted) {\n        this.emitComponentCompleted(componentState);\n      }\n    });\n  }\n\n  emitComponentStudentDataChanged(componentState) {\n    this.$scope.$emit('componentStudentDataChanged',\n        {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n  }\n\n  emitComponentCompleted(componentState) {\n    this.$scope.$emit('componentCompleted',\n        {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n  }\n\n  processLatestStudentWork() {\n    const latestComponentState =\n        this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestComponentState) {\n      const serverSaveTime = latestComponentState.serverSaveTime;\n      const clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestComponentState.isSubmit) {\n        this.setIsSubmitDirty(false);\n        this.emitComponentSubmitDirty(false);\n        this.setSubmittedMessage(clientSaveTime);\n      } else {\n        this.setIsSubmitDirty(true);\n        this.emitComponentSubmitDirty(true);\n        this.setSavedMessage(clientSaveTime);\n      }\n    }\n  }\n\n  setIsSubmitDirty(isDirty) {\n    this.isSubmitDirty = isDirty;\n  }\n\n  getIsSubmitDirty() {\n    return this.isSubmitDirty;\n  }\n\n  emitComponentDirty(isDirty) {\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: isDirty});\n  }\n\n  emitComponentSubmitDirty(isDirty) {\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: isDirty});\n  }\n\n  setSavedMessage(time) {\n    this.setSaveText(this.$translate('SAVED'), time);\n  }\n\n  setAutoSavedMessage(time) {\n    this.setSaveText(this.$translate('AUTO_SAVED'), time);\n  }\n\n  setSubmittedMessage(time) {\n    this.setSaveText(this.$translate('SUBMITTED'), time);\n  }\n\n  setSaveText(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  }\n\n  clearSaveText() {\n    this.setSaveText('', null);\n  }\n\n  /**\n   * Get all the step node ids in the project\n   * @returns {array} an array of step node id strings\n   */\n  getStepNodeIds() {\n    return this.ProjectService.getNodeIds();\n  }\n\n  /**\n   * Get the step number and title for a node\n   * @param {string} get the step number and title for this node\n   * @returns {string} the step number and title example \"1.5: Read Information\"\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    return this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n  }\n\n  /**\n   * Get the components in a step\n   * @param {string} id of the step\n   * @returns {array} an array of component objects\n   */\n  getComponentsByNodeId(nodeId) {\n    return this.ProjectService.getComponentsByNodeId(nodeId);\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param {string} nodeId the node id to check\n   * @returns {boolean} whether the node is a step node\n   */\n  isApplicationNode(nodeId) {\n    return this.ProjectService.isApplicationNode(nodeId);\n  }\n\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n  }\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Import any work needed from connected components\n   */\n  handleConnectedComponents() {\n    const connectedComponents = this.componentContent.connectedComponents;\n    if (connectedComponents != null) {\n      const componentStates = [];\n      for (let connectedComponent of connectedComponents) {\n        const componentState =\n            this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(connectedComponent.nodeId, connectedComponent.componentId);\n        if (componentState != null) {\n          componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n        }\n        if (connectedComponent.type === 'showWork') {\n          this.isDisabled = true;\n        }\n      }\n      if (componentStates.length > 0) {\n        this.setStudentWork(this.createMergedComponentState(componentStates));\n        this.handleConnectedComponentsPostProcess();\n        this.studentDataChanged();\n      }\n    }\n  }\n\n  createMergedComponentState(componentStates) {\n    return componentStates[0];\n  }\n\n  handleConnectedComponentsPostProcess() {\n    // overridden by children\n  }\n\n  getConnectedComponentsAndTheirComponentStates() {\n    const connectedComponentsAndTheirComponentStates = [];\n    for (const connectedComponent of this.componentContent.connectedComponents) {\n      const componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(\n        connectedComponent.nodeId, connectedComponent.componentId);\n      const connectedComponentsAndComponentState = {\n        connectedComponent: connectedComponent,\n        componentState: this.UtilService.makeCopyOfJSONObject(componentState)\n      };\n      connectedComponentsAndTheirComponentStates.push(connectedComponentsAndComponentState);\n    }\n    return connectedComponentsAndTheirComponentStates;\n  }\n\n  showCopyPublicNotebookItemButton() {\n    return this.ProjectService.isSpaceExists(\"public\");\n  }\n\n  copyPublicNotebookItemButtonClicked(event) {\n    this.$rootScope.$broadcast('openNotebook',\n      { nodeId: this.nodeId, componentId: this.componentId, insertMode: true, requester: this.nodeId + '-' + this.componentId, visibleSpace: \"public\" });\n  }\n\n  importWorkByStudentWorkId(studentWorkId) {\n    this.StudentDataService.getStudentWorkById(studentWorkId).then((componentState) => {\n      if (componentState != null) {\n        this.setStudentWork(componentState);\n        this.setParentStudentWorkIdToCurrentStudentWork(studentWorkId);\n        this.$rootScope.$broadcast('closeNotebook');\n      }\n    });\n  }\n\n  setParentStudentWorkIdToCurrentStudentWork(studentWorkId) {\n    this.parentStudentWorkIds = [studentWorkId];\n  }\n\n  isNotebookEnabled() {\n    return this.NotebookService.isNotebookEnabled();\n  }\n\n  isStudentNoteClippingEnabled() {\n    return this.NotebookService.isStudentNoteClippingEnabled();\n  }\n\n  isAddToNotebookEnabled() {\n    return this.isNotebookEnabled() && this.isStudentNoteClippingEnabled();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  authoringAddConnectedComponent() {\n    const connectedComponent = this.createConnectedComponent();\n    this.addConnectedComponent(connectedComponent);\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n    this.authoringViewComponentChanged();\n  }\n\n  addConnectedComponent(connectedComponent) {\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n    this.authoringComponentContent.connectedComponents.push(connectedComponent);\n  }\n\n  createConnectedComponent() {\n    return {\n      nodeId: this.nodeId,\n      componentId: null,\n      type: null\n    };\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n    this.authoringAutomaticallySetConnectedComponentTypeIfPossible(connectedComponent);\n  }\n\n  authoringAutomaticallySetConnectedComponentTypeIfPossible(connectedComponent) {\n    if (connectedComponent.componentId != null) {\n      connectedComponent.type = 'importWork';\n    }\n    this.authoringAutomaticallySetConnectedComponentFieldsIfPossible(connectedComponent);\n  }\n\n  authoringAutomaticallySetConnectedComponentFieldsIfPossible(connectedComponent) {\n\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n    this.authoringAutomaticallySetConnectedComponentTypeIfPossible(connectedComponent);\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type === 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type === 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  addTag() {\n    if (this.authoringComponentContent.tags == null) {\n      this.authoringComponentContent.tags = [];\n    }\n    this.authoringComponentContent.tags.push('');\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n      let tag = this.authoringComponentContent.tags[index];\n      this.authoringComponentContent.tags.splice(index, 1);\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n      let tag = this.authoringComponentContent.tags[index];\n      this.authoringComponentContent.tags.splice(index, 1);\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  deleteTag(indexOfTagToDelete) {\n    if (confirm(this.$translate('areYouSureYouWantToDeleteThisTag'))) {\n      this.authoringComponentContent.tags.splice(indexOfTagToDelete, 1);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    let html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  }\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  }\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  }\n\n  showJSONButtonClicked() {\n    if (this.showJSONAuthoring) {\n      // we were showing the JSON authoring view and now we want to hide it\n      if (this.isJSONValid()) {\n        this.saveJSONAuthoringViewChanges();\n        this.toggleJSONAuthoringView();\n        this.UtilService.hideJSONValidMessage();\n      } else {\n        let isRollback = confirm(this.$translate('jsonInvalidErrorMessage'));\n        if (isRollback) {\n          // the author wants to revert back to the last valid JSON\n          this.toggleJSONAuthoringView();\n          this.UtilService.hideJSONValidMessage();\n          this.isJSONStringChanged = false;\n          this.rollbackToRecentValidJSON();\n          this.saveJSONAuthoringViewChanges();\n        }\n      }\n    } else {\n      // we were not showing the JSON authoring view and now we want to show it\n      this.toggleJSONAuthoringView();\n      this.rememberRecentValidJSON();\n    }\n  }\n\n  toggleJSONAuthoringView() {\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n  }\n\n  authoringJSONChanged() {\n    this.isJSONStringChanged = true;\n    if (this.isJSONValid()) {\n      this.UtilService.showJSONValidMessage();\n      this.rememberRecentValidJSON();\n    } else {\n      this.UtilService.showJSONInvalidMessage();\n    }\n  }\n\n  isJSONValid() {\n    try {\n      angular.fromJson(this.authoringComponentContentJSONString);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  rememberRecentValidJSON() {\n    this.authoringValidComponentContentJSONString = this.authoringComponentContentJSONString;\n  }\n\n  rollbackToRecentValidJSON() {\n    this.authoringComponentContentJSONString = this.authoringValidComponentContentJSONString;\n  }\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  saveJSONAuthoringViewChanges() {\n    try {\n      const editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n      this.componentContent = editedComponentContent;\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n      this.isJSONStringChanged = false;\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  }\n\n  isEventTargetThisComponent(args) {\n    return this.isForThisComponent(args);\n  }\n\n  isForThisComponent(object) {\n    return this.nodeId == object.nodeId && this.componentId == object.componentId;\n  }\n\n  canSubmit() {\n    return !this.hasMaxSubmitCount() || this.hasSubmitsLeft();\n  }\n\n  hasMaxSubmitCount() {\n    return this.getMaxSubmitCount() != null;\n  }\n\n  getMaxSubmitCount() {\n    return this.componentContent.maxSubmitCount;\n  }\n\n  getNumberOfSubmitsLeft() {\n    return this.getMaxSubmitCount() - this.submitCounter;\n  }\n\n  hasSubmitsLeft() {\n    return this.getNumberOfSubmitsLeft() > 0;\n  }\n\n  setIsSubmit(isSubmit) {\n    this.isSubmit = isSubmit;\n  }\n\n  getIsSubmit() {\n    return this.isSubmit;\n  }\n\n  setIsDirty(isDirty) {\n    this.isDirty = isDirty;\n  }\n\n  getIsDirty() {\n    return this.isDirty;\n  }\n\n  removeAttachment(attachment) {\n    if (this.attachments.indexOf(attachment) !== -1) {\n      this.attachments.splice(this.attachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n    }\n  }\n\n  attachStudentAsset(studentAsset) {\n    this.StudentAssetService.copyAssetForReference(studentAsset).then((copiedAsset) => {\n      const attachment = {\n        studentAssetId: copiedAsset.id,\n        iconURL: copiedAsset.iconURL\n      };\n      this.attachments.push(attachment);\n      this.studentDataChanged();\n    });\n  }\n\n  hasMaxScore() {\n    return this.componentContent.maxScore != null && this.componentContent.maxScore !== '';\n  }\n\n  getMaxScore() {\n    return this.componentContent.maxScore;\n  }\n\n  createAutoScoreAnnotation(data) {\n    return this.createAutoAnnotation('autoScore', data);\n  }\n\n  createAutoCommentAnnotation(data) {\n    return this.createAutoAnnotation('autoComment', data);\n  }\n\n  createAutoAnnotation(type, data) {\n    const runId = this.ConfigService.getRunId();\n    const periodId = this.ConfigService.getPeriodId();\n    const nodeId = this.nodeId;\n    const componentId = this.componentId;\n    const toWorkgroupId = this.ConfigService.getWorkgroupId();\n    if (type === 'autoScore') {\n      return this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n    } else if (type === 'autoComment') {\n      return this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n    }\n  }\n\n  updateLatestScoreAnnotation(annotation) {\n    this.latestAnnotations.score = annotation;\n  }\n\n  updateLatestCommentAnnotation(annotation) {\n    this.latestAnnotations.comment = annotation;\n  }\n}\n\nComponentController.$inject = [];\nexport default ComponentController;\n"],"file":"componentController.js"}